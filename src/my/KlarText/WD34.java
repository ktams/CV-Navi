/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WD34.java
 *
 * Created on 09.09.2009, 16:50:45
 */

package my.KlarText;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;
import javax.swing.border.TitledBorder;

/**
 *
 * @author ktams
 */
public class WD34 extends javax.swing.JFrame {
    public KlarTextUI KTUI;
    private TwoWaySerialComm Com = null;
    private int SendeZaehler;
    private boolean bWD34 = true;
    private boolean bRead = false;
    private boolean bWrite = false;
    private int cvAnfrage = -1;
    private int cvWert = -1;
    private int decAdr = -1;
    private javax.swing.Timer timer = null;
    private boolean bWaitAnswerInProgresss=false;
    byte[] bArray = new byte[200];
    public int bytesRead=0;
    private int retries;
    private boolean bAbbruch = false;

    /** Creates new form WD34 */
    WD34(KlarTextUI ktuiThis) {
        if( ktuiThis == null ) {
            return;
        }
        KTUI = ktuiThis;
        if( KTUI.frameInstanceDEVICE != null ) {
            KTUI.frameInstanceDEVICE.toFront();
            KTUI.frameInstanceDEVICE.repaint();
            return;
        }

        ImageIcon II = null;
        initComponents();
        switch( KTUI.Decoder ) {
            case c.WD_34 :
                II = new ImageIcon(getClass().getResource("/WD-34.gif"));
                jBild.setIcon(II);
                bWD34 = true;
                setTitle( KTUI.getMenutext( decoderList.WD_34 ).trim() );
                break;
            case c.SD_34 :
                II = new ImageIcon(getClass().getResource("/SD-34.gif"));
                jBild.setIcon(II);
                bWD34 = false;
                setTitle( KTUI.getMenutext( decoderList.SD_34 ).trim() );
                break;
            default:
                System.out.println("WD34 unsupported deocder type "+KTUI.Decoder);
                return;
        }
        this.setIconImage(II.getImage());

        setLocationRelativeTo(ktuiThis);
        setVisible(true);
        KTUI.frameInstanceDEVICE = this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelOnTime2 = new javax.swing.JLabel();
        jOnTime2 = new javax.swing.JTextField();
        jVersion = new javax.swing.JLabel();
        jLabelOnTime1 = new javax.swing.JLabel();
        jOnTime1 = new javax.swing.JTextField();
        jAuslesen = new javax.swing.JButton();
        jSchreiben = new javax.swing.JButton();
        jClose = new javax.swing.JButton();
        jLabelOnTime3 = new javax.swing.JLabel();
        jOnTime3 = new javax.swing.JTextField();
        jLabelOnTime4 = new javax.swing.JLabel();
        jOnTime4 = new javax.swing.JTextField();
        jLabelAdress = new javax.swing.JLabel();
        jAdresse = new javax.swing.JTextField();
        jWeichenAdresse = new javax.swing.JLabel();
        jLabelRailCom = new javax.swing.JLabel();
        jRC_Ein = new javax.swing.JCheckBox();
        jLabelRailComCheck = new javax.swing.JLabel();
        jRC_Pruefen = new javax.swing.JCheckBox();
        jBild = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabelZentraleSendetCoilOff = new javax.swing.JLabel();
        jZentraleSendetCoilOff = new javax.swing.JCheckBox();
        jUpdateInfo = new javax.swing.JLabel();
        jAbbrechen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAutoRequestFocus(false);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "WD-34 / SD-34", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jLabelOnTime2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelOnTime2.setText("On Time 2");
        jLabelOnTime2.setToolTipText("<html>Zeit in 1/10 Sekunden, die der Ausgang 2 aktiv ist.<br>CV4</html>");

        jOnTime2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jOnTime2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jOnTime2.setText("5");
        jOnTime2.setToolTipText("<html>Zeit in 1/10 Sekunden, die der Ausgang 2 aktiv ist.<br>CV4</html>");
        jOnTime2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jOnTime2FocusLost(evt);
            }
        });
        jOnTime2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jOnTime2KeyReleased(evt);
            }
        });

        jVersion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jVersion.setText("Version: ----");

        jLabelOnTime1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelOnTime1.setText("On Time 1");
        jLabelOnTime1.setToolTipText("<html>Zeit in 1/10 Sekunden, die der Ausgang 1 aktiv ist.<br>CV3</html>");

        jOnTime1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jOnTime1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jOnTime1.setText("5");
        jOnTime1.setToolTipText("<html>Zeit in 1/10 Sekunden, die der Ausgang 1 aktiv ist.<br>CV3</html>");
        jOnTime1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jOnTime1FocusLost(evt);
            }
        });
        jOnTime1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jOnTime1KeyReleased(evt);
            }
        });

        jAuslesen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jAuslesen.setText("Lesen");
        jAuslesen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAuslesenActionPerformed(evt);
            }
        });

        jSchreiben.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jSchreiben.setText("Schreiben");
        jSchreiben.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSchreibenActionPerformed(evt);
            }
        });

        jClose.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jClose.setText("Schlie√üen");
        jClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCloseActionPerformed(evt);
            }
        });

        jLabelOnTime3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelOnTime3.setText("On Time 3");
        jLabelOnTime3.setToolTipText("<html>Zeit in 1/10 Sekunden, die der Ausgang 3 aktiv ist.<br>CV5</html>");

        jOnTime3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jOnTime3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jOnTime3.setText("5");
        jOnTime3.setToolTipText("<html>Zeit in 1/10 Sekunden, die der Ausgang 3 aktiv ist.<br>CV5</html>");
        jOnTime3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jOnTime3FocusLost(evt);
            }
        });
        jOnTime3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jOnTime3KeyReleased(evt);
            }
        });

        jLabelOnTime4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelOnTime4.setText("On Time 4");
        jLabelOnTime4.setToolTipText("<html>Zeit in 1/10 Sekunden, die der Ausgang 4 aktiv ist.<br>CV6</html>");

        jOnTime4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jOnTime4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jOnTime4.setText("5");
        jOnTime4.setToolTipText("<html>Zeit in 1/10 Sekunden, die der Ausgang 4 aktiv ist.<br>CV6</html>");
        jOnTime4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jOnTime4FocusLost(evt);
            }
        });
        jOnTime4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jOnTime4KeyReleased(evt);
            }
        });

        jLabelAdress.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelAdress.setText("Adresse:");

        jAdresse.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jAdresse.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jAdresse.setText("1");
        jAdresse.setToolTipText("<html>CV1, CV9<br>\nMM max. 255 -> [1..1020]<br>\nDCC max. 510 -> [1..2040]</html>");
        jAdresse.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jAdresseFocusLost(evt);
            }
        });
        jAdresse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jAdresseKeyReleased(evt);
            }
        });

        jWeichenAdresse.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jWeichenAdresse.setText("-> Weiche 1 - 4");

        jLabelRailCom.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelRailCom.setText("RailCom");
        jLabelRailCom.setToolTipText("CV29 Bit3");

        jRC_Ein.setSelected(true);
        jRC_Ein.setToolTipText("CV29 Bit3");

        jLabelRailComCheck.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelRailComCheck.setText("RailCom - Pr√ºfung");
        jLabelRailComCheck.setToolTipText("<html>Decoder pr√ºft, ob RailCom m√∂glich ist und schaltet RailCom ggfls aus.<br>CV33, Bit 0<html>");

        jRC_Pruefen.setSelected(true);
        jRC_Pruefen.setToolTipText("<html>Decoder pr√ºft, ob RailCom m√∂glich ist und schaltet RailCom ggfls aus.<br>CV33, Bit0<html>");

        jProgressBar1.setStringPainted(true);

        jLabelZentraleSendetCoilOff.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelZentraleSendetCoilOff.setText("Zentrale sendet Coil-Off");
        jLabelZentraleSendetCoilOff.setToolTipText("<html>MasterControl: Ja<br>Intellibox, Lenz, Z21: Nein<br>CV33, Bit1<html>\n");

        jZentraleSendetCoilOff.setToolTipText("<html>MasterControl: Ja<br>Intellibox, Lenz, Z21: Nein<br>CV33, Bit1<html>");

        jUpdateInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jUpdateInfo.setText("read/write info");
        jUpdateInfo.setToolTipText("");

        jAbbrechen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jAbbrechen.setText("Abbrechen");
        jAbbrechen.setToolTipText("Lesen/Schreiben abbrechen");
        jAbbrechen.setEnabled(false);
        jAbbrechen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAbbrechenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAdress)
                            .addComponent(jLabelOnTime1)
                            .addComponent(jLabelOnTime2)
                            .addComponent(jLabelOnTime3)
                            .addComponent(jLabelOnTime4)
                            .addComponent(jLabelRailCom)
                            .addComponent(jLabelRailComCheck)
                            .addComponent(jLabelZentraleSendetCoilOff))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jAdresse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jOnTime1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jOnTime2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jOnTime3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jOnTime4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRC_Ein, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jRC_Pruefen, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jZentraleSendetCoilOff, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jVersion)
                                        .addGap(0, 99, Short.MAX_VALUE))
                                    .addComponent(jBild, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jSchreiben, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jAbbrechen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jAuslesen, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jWeichenAdresse)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jUpdateInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jClose, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelAdress)
                    .addComponent(jAdresse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jWeichenAdresse))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelOnTime1)
                            .addComponent(jOnTime1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelOnTime2)
                            .addComponent(jOnTime2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelOnTime3)
                            .addComponent(jOnTime3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelOnTime4)
                            .addComponent(jOnTime4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelRailCom)
                            .addComponent(jRC_Ein))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelRailComCheck)
                            .addComponent(jRC_Pruefen))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelZentraleSendetCoilOff)
                            .addComponent(jZentraleSendetCoilOff)
                            .addComponent(jVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBild, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jAuslesen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSchreiben)
                                .addGap(18, 18, 18)
                                .addComponent(jAbbrechen)))
                        .addGap(39, 39, 39)))
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jClose)
                    .addComponent(jUpdateInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCloseActionPerformed
        dispose();
}//GEN-LAST:event_jCloseActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        stopIOAction();
        KTUI.frameInstanceDEVICE = null;
        KTUI.setFocus();
    }//GEN-LAST:event_formWindowClosed

    private void jSchreibenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSchreibenActionPerformed
        Com = KTUI.safelyOpenCom( this, Com );
        if( Com == null ) {
            return;
        }

        KTUI.flushReadBuffer(Com);
        // Com.write((byte)0x60);

        cvAnfrage = 8;
        String s = "XPTRD 8\r"; // Hersteller
        jUpdateInfo.setText("write: verify vendor");
        System.out.println("write: verify vendor");
        Com.write(s);
        SendeZaehler = 0;
        jProgressBar1.setMaximum(9);
        bWaitAnswerInProgresss = true;
        resetbArray();
        timer.setInitialDelay(KlarTextUI.timer1);
        timer.setDelay(KlarTextUI.timer2);
        timer.setRepeats(true);
        retries = KlarTextUI.timerRetries;
        bWrite = true;
        startIOAction();
    }//GEN-LAST:event_jSchreibenActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        if( ! KTUI.bSpracheDE ) {
            jLabelAdress.setText("Address:");
            jLabelRailComCheck.setText("RailCom check");
            jLabelZentraleSendetCoilOff.setText("Control unit sends coil off");
            jAuslesen.setText("Read");
            jSchreiben.setText("Write");
            jAbbrechen.setText("Cancel");
            jClose.setText("Close");
            jWeichenAdresse.setText("-> Switch 1 - 4");
        }
        TitledBorder b = (TitledBorder)jPanel1.getBorder();
        if(bWD34)
        {
            b.setTitle("WD-34");
        }
        else
        {
            b.setTitle("SD-34");
            jPanel1.remove(jLabelOnTime1);
            jPanel1.remove(jOnTime1);
            jPanel1.remove(jLabelOnTime2);
            jPanel1.remove(jOnTime2);
            jPanel1.remove(jLabelOnTime3);
            jPanel1.remove(jOnTime3);
            jPanel1.remove(jLabelOnTime4);
            jPanel1.remove(jOnTime4);
            jPanel1.remove(jLabelZentraleSendetCoilOff);
            jPanel1.remove(jZentraleSendetCoilOff);
        }
        jPanel1.repaint();

        // store pointer to instance in a final variable -> useable inside ActionListener
        final WD34 outerThis = this;

        final ActionListener actionListener = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                String s;

                if( bAbbruch ) {
                    System.out.println("Abbruch durch Benutzer" );
                    if( bRead || bWrite ) {
                        if( KTUI.bSpracheDE ) {
                            jProgressBar1.setString("Abbruch durch Benutzer");
                        } else {
                            jProgressBar1.setString("Cancelled by User");
                        }
                        KTUI.mbRWCancelled(outerThis, 5);
                    }
                    stopIOAction();
                    bAbbruch = false;
                    return;
                }

                if( bWaitAnswerInProgresss ) {
                    byte[] bArrayTmp = new byte[200];
                    int newBytes;
                    newBytes = Com.read(bArrayTmp); // was gibts Neues ?
                    if( newBytes > 0 ) {
                        //wenn ja, an bisher empfangene Daten anh√§ngen
                        System.arraycopy(bArrayTmp, 0, bArray, bytesRead, newBytes);
                        if( KlarTextUI.debugLevel > 0 ) {
                            System.out.println("524 MERGE PRE bytesRead="+bytesRead+" newBytes="+newBytes+" res="+(bytesRead+newBytes) );
                        }
                        bytesRead += newBytes;
                        bArray[bytesRead] = 0;
                        if( KlarTextUI.debugLevel > 2 ) {
                            System.out.println("529 aktueller Stand: bytesRead="+bytesRead );
                            KTUI.dumpbArray(bArray);
                        }
                    }

                    if( newBytes == 0 ) {
                        System.out.print("->"+retries+" ");
                        retries--;
                        if( retries == 0 ) {
                            jProgressBar1.setString("Timeout");
                            System.out.println(" -> retries ende bytesRead="+bytesRead );
                            stopIOAction();
                            KTUI.mbDeviceReadProblem( outerThis );
                            return;
                        }
                        if( KTUI.bSpracheDE ) {
                            jProgressBar1.setString("Warte auf Antwort "+retries);
                        } else {
                            jProgressBar1.setString("Waiting for an answer "+retries);
                        }
                        return;
                    }

                    // es ist ein vollst√§ndiger Datensatz angekommen ?
                    bArray[bytesRead] = 0; // zur Sicherheit ;)

                    if( ! KTUI.checkReadComplete(bArray) ) {
                        // incomplete -> wait for more
                        return;
                    }
                    bWaitAnswerInProgresss = false;
                    // Datensatz vollst√§ndig -> Teste/Analysiere erwarteten Wert
                }

                if(bRead) {
                    // check for a valid PTRD answer
                    cvWert = KTUI.checkPTRDAnswer( bArray );
                    if( KlarTextUI.debugLevel >= 0 ) {
                        System.out.println("bRead cv["+cvAnfrage+"]="+cvWert );
                    }
                    if( cvWert < 0 ) {
                        // TODO handle error on read
                        System.out.println("bRead ERROR cv["+cvAnfrage+"]="+cvWert );
                    }

                    switch (SendeZaehler) {
                        case 0:
                            if(cvWert != 62)
                            {
                                bRead = false;
                                stopIOAction();
                                jUpdateInfo.setText("read: wrong vendor");
                                KTUI.mbNoTams( outerThis, c.mbRDcancel );
                                return;
                            }

                            SendeZaehler++;
                            cvAnfrage = 1;
                            s = "XPTRD 1\r"; // dec adr % 64
                            jUpdateInfo.setText("read: decoder address low");
                            Com.write(s);

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 1:
                            SendeZaehler++;
                            cvAnfrage = 9;
                            s = "XPTRD 9\r"; // dec adr / 64
                            jUpdateInfo.setText("read: decoder address high");
                            Com.write(s);

                            decAdr = cvWert ;

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 2:
                            SendeZaehler++;
                            cvAnfrage = 3;
                            s = "XPTRD 3\r"; // OnTime 1
                            jUpdateInfo.setText("read: On Time 1");
                            if( ! bWD34 ) {
                                // Skip reading OnTime for SD-34
                                cvAnfrage = 7;
                                s = "XPTRD 7\r"; // Version
                                jUpdateInfo.setText("read: Version");
                                SendeZaehler += 4;
                            }
                            Com.write(s);

                            decAdr += cvWert*64;
                            jAdresse.setText("" + decAdr);
                            String ss = "-> ";
                            if( KTUI.bSpracheDE ) {
                                ss += "Weiche " ;
                            } else {
                                ss += "Switch " ;
                            }
                            ss += (decAdr*4 - 3) + " - " + decAdr*4;
                            jWeichenAdresse.setText(ss);

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 3:
                            SendeZaehler++;
                            cvAnfrage = 4;
                            s = "XPTRD 4\r"; // OnTime 2
                            jUpdateInfo.setText("read: On Time 2");
                            Com.write(s);

                            jOnTime1.setText("" + cvWert);

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 4:
                            SendeZaehler++;
                            cvAnfrage = 5;
                            s = "XPTRD 5\r"; // OnTime 3
                            jUpdateInfo.setText("read: On Time 3");
                            Com.write(s);

                            jOnTime2.setText("" + cvWert);

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 5:
                            SendeZaehler++;
                            cvAnfrage = 6;
                            s = "XPTRD 6\r"; // OnTime 4
                            jUpdateInfo.setText("read: On Time 4");
                            Com.write(s);

                            jOnTime3.setText("" + cvWert);

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 6:
                            SendeZaehler++;
                            cvAnfrage = 7;
                            s = "XPTRD 7\r"; // Version
                            jUpdateInfo.setText("read: Version");
                            Com.write(s);

                            jOnTime4.setText("" + cvWert);

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 7:
                            SendeZaehler++;
                            cvAnfrage = 29;
                            s = "XPTRD 29\r"; // Konfig 1 (RailCom)
                            jUpdateInfo.setText("read: config CV29");
                            Com.write(s);

                            jVersion.setText("Version: V" + cvWert/10 + "." + cvWert%10);

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 8:
                            SendeZaehler++;
                            cvAnfrage = 33;
                            s = "XPTRD 33\r"; // Konfig 2
                            jUpdateInfo.setText("read: config CV33");
                            Com.write(s);

                            // check Bidi/Railcom bit of CV29
                            jRC_Ein.setSelected((cvWert&0x08)==0x08);

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 9:
                            SendeZaehler++;
                            jUpdateInfo.setText("read: finished");

                            jRC_Pruefen.setSelected( ! ( (cvWert & 0x01) == 0x01));
                            jZentraleSendetCoilOff.setSelected((cvWert&0x02)==0x02);
                            bRead = false;

                            jProgressBar1.setString(null);
                            stopIOAction();
                            break;
                    }
                    jProgressBar1.setValue(SendeZaehler);
                }
                if(bWrite) {
                    switch (SendeZaehler) {
                        case 0:
                            // check for a valid PTRD answer
                            cvWert = KTUI.checkPTRDAnswer( bArray );
                            if( KlarTextUI.debugLevel >= 0 ) {
                                System.out.println("bWrite read cv["+cvAnfrage+"]="+cvWert );
                            }
                            if( cvWert < 0 ) {
                                // TODO handle error on read
                                System.out.println("bWrite ERROR cv["+cvAnfrage+"]="+cvWert );
                            }
                            // check for a valid PTRD answer

                            if(cvWert != 62)
                            {
                               bWrite = false;
                               stopIOAction();
                               jUpdateInfo.setText("write: wrong vendor");
                               KTUI.mbNoTams( outerThis, c.mbWRcancel );
                               return;
                            }

                            SendeZaehler++;
                            cvWert = KTUI.checkTextField( outerThis, jAdresse, 1, c.MAX_DCC_ACCMOD, 1, false);
                            s = "XPTWD " + " 1 " + cvWert%64 + "\r";
                            jUpdateInfo.setText("write: address low");
                            Com.write(s);
                            System.out.println("bWrite cv[1]:="+(cvWert%64) );

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 1:
                            SendeZaehler++;
                            if( ! bWD34 ) {
                                // Skip writing OnTIme for SD34
                                SendeZaehler += 4;
                            }
                            cvWert = KTUI.checkTextField( outerThis, jAdresse, 1, c.MAX_DCC_ACCMOD, 1, false);
                            s = "XPTWD 9 " + cvWert/64 + "\r";
                            jUpdateInfo.setText("write: address high");
                            Com.write(s);
                            System.out.println("bWrite cv[9]:="+(cvWert/64) );

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 2:
                            SendeZaehler++;
                            cvWert = KTUI.checkTextField( outerThis, jOnTime1, 0, 255, 0, false);
                            s = "XPTWD 3 " + cvWert + "\r";
                            jUpdateInfo.setText("write: On Time 1");
                            Com.write(s);
                            System.out.println("bWrite cv[3]:="+cvWert );

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 3:
                            SendeZaehler++;
                            cvWert = KTUI.checkTextField( outerThis, jOnTime2, 0, 255, 0, false);
                            s = "XPTWD 4 " + cvWert + "\r";
                            jUpdateInfo.setText("write: On Time 2");
                            Com.write(s);
                            System.out.println("bWrite cv[4]:="+cvWert );

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 4:
                            SendeZaehler++;
                            cvWert = KTUI.checkTextField( outerThis, jOnTime3, 0, 255, 0, false);
                            s = "XPTWD 5 " + cvWert + "\r";
                            jUpdateInfo.setText("write: On Time 3");
                            Com.write(s);
                            System.out.println("bWrite cv[5]:="+cvWert );

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 5:
                            SendeZaehler++;
                            cvWert = KTUI.checkTextField( outerThis, jOnTime4, 0, 255, 0, false);
                            s = "XPTWD 6 " + cvWert + "\r";
                            jUpdateInfo.setText("write: On Time 4");
                            Com.write(s);
                            System.out.println("bWrite cv[6]:="+cvWert );

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 6:
                            SendeZaehler++;
                            if(jRC_Ein.isSelected())
                                cvWert = 136;
                            else
                                cvWert = 128;
                            s = "XPTWD 29 " + cvWert + "\r";
                            jUpdateInfo.setText("write: config CV29");
                            Com.write(s);
                            System.out.println("bWrite cv[29]:="+cvWert );

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        case 7:
                            SendeZaehler++;
                            cvWert = 0;
                            if( ! jRC_Pruefen.isSelected())
                                cvWert += 0x01;
                            if(jZentraleSendetCoilOff.isSelected())
                                cvWert += 0x02;
                            s = "XPTWD 33 " + cvWert + "\r";
                            jUpdateInfo.setText("write: config CV33");
                            Com.write(s);
                            System.out.println("bWrite cv[33]:="+cvWert );

                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = KlarTextUI.timerRetries;
                            resetbArray();
                            timer.restart();
                            break;

                        default:
                            SendeZaehler++;
                            bWrite = false;
                            jUpdateInfo.setText("write: finished");

                            jProgressBar1.setString(null);
                            stopIOAction();
                    }
                    jProgressBar1.setValue(SendeZaehler);
                }
            }
        };
        timer = new javax.swing.Timer(5000, actionListener);
        timer.setRepeats(false);
    }//GEN-LAST:event_formWindowOpened

    private void jAuslesenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAuslesenActionPerformed
        Com = KTUI.safelyOpenCom( this, Com );
        if( Com == null ) {
            return;
        }

        KTUI.flushReadBuffer(Com);
        SendeZaehler = 0;
        cvAnfrage = 8;
        String s = "XPTRD 8\r"; // Hersteller
        jUpdateInfo.setText("read: verify vendor");
        Com.write(s);
        resetbArray();
        bWaitAnswerInProgresss = true;
        timer.setInitialDelay(KlarTextUI.timer1);
        timer.setDelay(KlarTextUI.timer2);
        timer.setRepeats(true);
        retries = KlarTextUI.timerRetries;
        jProgressBar1.setMaximum(10);
        bRead = true;
        startIOAction();
}//GEN-LAST:event_jAuslesenActionPerformed

    private void startIOAction() {
        bAbbruch = false;
        // set buttons for IO in progress
        jAdresse.setEnabled(false);
        if( bWD34 ) {
            jOnTime1.setEnabled(false);
            jOnTime2.setEnabled(false);
            jOnTime3.setEnabled(false);
            jOnTime4.setEnabled(false);
        }
        jRC_Ein.setEnabled(false);
        jRC_Pruefen.setEnabled(false);
        jZentraleSendetCoilOff.setEnabled(false);
        jAuslesen.setEnabled(false);
        jSchreiben.setEnabled(false);
        jAbbrechen.setEnabled(true);
        // init progress bar
        jProgressBar1.setValue(0);
        jProgressBar1.setString(null);
        // set cursor to WAIT
        Cursor c = new Cursor(Cursor.WAIT_CURSOR);
        this.setCursor(c);
        //start timer
        timer.start();
    }
    private void stopIOAction() {
        // stop timer
        timer.stop();

        if( bRead ) {
            bRead = false;
            jUpdateInfo.setText("read: cancelled");
        }
        if( bWrite ) {
            bWrite = false;
            jUpdateInfo.setText("write: cancelled");
        }

        // set buttons to normal operation
        jAuslesen.setEnabled(true);
        jSchreiben.setEnabled(true);
        jAbbrechen.setEnabled(false);
        jAdresse.setEnabled(true);
        if( bWD34 ) {
            jOnTime1.setEnabled(true);
            jOnTime2.setEnabled(true);
            jOnTime3.setEnabled(true);
            jOnTime4.setEnabled(true);
        }
        jRC_Ein.setEnabled(true);
        jRC_Pruefen.setEnabled(true);
        jZentraleSendetCoilOff.setEnabled(true);

        // set cursor
        Cursor c = new Cursor(Cursor.DEFAULT_CURSOR );
        setCursor(c);

        // close interface
        Com = KTUI.safelyCloseCom( this, Com );
    }

    private void jAbbrechenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAbbrechenActionPerformed
        bAbbruch = true;
    }//GEN-LAST:event_jAbbrechenActionPerformed

    private void jAdresseFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jAdresseFocusLost
        int myDecAdr = KTUI.checkTextField( this, jAdresse, 1, c.MAX_DCC_ACCMOD, 1, true );
        String ss = "-> ";
        if( KTUI.bSpracheDE ) {
            ss += "Weiche " ;
        } else {
            ss += "Switch " ;
        }
        ss += (myDecAdr*4 - 3) + " - " + myDecAdr*4;
        jWeichenAdresse.setText(ss);
    }//GEN-LAST:event_jAdresseFocusLost

    private void jOnTime1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jOnTime1FocusLost
        KTUI.checkTextField( this, jOnTime1, 0, 255, 5, true );
    }//GEN-LAST:event_jOnTime1FocusLost

    private void jOnTime2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jOnTime2FocusLost
        KTUI.checkTextField( this, jOnTime2, 0, 255, 5, true );
    }//GEN-LAST:event_jOnTime2FocusLost

    private void jOnTime3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jOnTime3FocusLost
        KTUI.checkTextField( this, jOnTime3, 0, 255, 5, true );
    }//GEN-LAST:event_jOnTime3FocusLost

    private void jOnTime4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jOnTime4FocusLost
        KTUI.checkTextField( this, jOnTime4, 0, 255, 5, true );
    }//GEN-LAST:event_jOnTime4FocusLost

    private void jAdresseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jAdresseKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jAdresseFocusLost(null);
            jOnTime1.grabFocus();
        }
    }//GEN-LAST:event_jAdresseKeyReleased

    private void jOnTime1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jOnTime1KeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jOnTime2.grabFocus();
        }
    }//GEN-LAST:event_jOnTime1KeyReleased

    private void jOnTime2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jOnTime2KeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jOnTime3.grabFocus();
        }
    }//GEN-LAST:event_jOnTime2KeyReleased

    private void jOnTime3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jOnTime3KeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jOnTime4.grabFocus();
        }
    }//GEN-LAST:event_jOnTime3KeyReleased

    private void jOnTime4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jOnTime4KeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jRC_Ein.grabFocus();
        }
    }//GEN-LAST:event_jOnTime4KeyReleased

    private void resetbArray() {
        // reset bArray with '0'
        for( int i = 0 ; i < bytesRead ; i++ ) {
            bArray[i] = 0;
        }
        bytesRead = 0;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAbbrechen;
    private javax.swing.JTextField jAdresse;
    private javax.swing.JButton jAuslesen;
    private javax.swing.JLabel jBild;
    private javax.swing.JButton jClose;
    private javax.swing.JLabel jLabelAdress;
    private javax.swing.JLabel jLabelOnTime1;
    private javax.swing.JLabel jLabelOnTime2;
    private javax.swing.JLabel jLabelOnTime3;
    private javax.swing.JLabel jLabelOnTime4;
    private javax.swing.JLabel jLabelRailCom;
    private javax.swing.JLabel jLabelRailComCheck;
    private javax.swing.JLabel jLabelZentraleSendetCoilOff;
    private javax.swing.JTextField jOnTime1;
    private javax.swing.JTextField jOnTime2;
    private javax.swing.JTextField jOnTime3;
    private javax.swing.JTextField jOnTime4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JCheckBox jRC_Ein;
    private javax.swing.JCheckBox jRC_Pruefen;
    private javax.swing.JButton jSchreiben;
    private javax.swing.JLabel jUpdateInfo;
    private javax.swing.JLabel jVersion;
    private javax.swing.JLabel jWeichenAdresse;
    private javax.swing.JCheckBox jZentraleSendetCoilOff;
    // End of variables declaration//GEN-END:variables

}
