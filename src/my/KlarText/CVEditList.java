/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.KlarText;

import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import static my.KlarText.KlarTextUI.debugLevel;

/**
 *
 * @author Lothar
 */
public class CVEditList extends javax.swing.JDialog implements Printable {

    /**
     * Creates new form CVEditList
     */
    public byte CV_To_Edit[] = null;
    private byte CV_To_Edit_Old[];
    public int CV[][] = null;
    public int Decoder = 1;
    public boolean bPrint = false;
    public ReadWriteCV rwcv = null;
    private KlarTextUI KTUI = null;

    public CVEditList(Dialog parent, boolean modal, KlarTextUI ktui, int[][] CV, byte[] CV_To_Edit, boolean bPrint) {
        super(parent, modal);
        this.KTUI = ktui;
        if( KTUI != null ) {
            this.Decoder = KTUI.Decoder;
            this.CV = CV;
            this.CV_To_Edit = CV_To_Edit;
            this.bPrint = bPrint;
            this.rwcv = (ReadWriteCV) parent;
            if( debugLevel >= 2 ) {
                if( CV != null ) {
                    System.out.println("CVEditList init CV.length="+CV.length+" CV[0].length"+CV[0].length);
                } else {
                    System.out.println("CVEditList init CV == null");
                }
            }
            initComponents();
            pack();
            setLocationRelativeTo(parent);
            setVisible(true);
        } else {
            dispose();
        }
    }

    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private int getValueForCV(int cvNum) {
        for( int i = 0 ; i < CV[0].length ; i++) {
            if( CV[0][i] == cvNum ) {
                return( CV[1][i] );
            }
        }
        return -1;
    }

    private boolean setCVvalue(int cv, int value) {
        for( int i = 0 ; i < CV[0].length ; i++) {
            if( CV[0][i] == cv ) {
                CV[1][i] = value;
                return true;
            }
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jAbbruch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jOK = new javax.swing.JButton();
        jGruppe_an = new javax.swing.JButton();
        jGruppe_2 = new javax.swing.JButton();
        jGruppe_1 = new javax.swing.JButton();
        jGruppe_aus = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jAbbruch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jAbbruch.setText("Abbrechen");
        jAbbruch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAbbruchActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), null, "Adresse", null},
                { new Integer(2), null, "Mindestgeschwindigkeit", null},
                { new Integer(3), null, "Anfahrverzögerung", null},
                { new Integer(4), null, "Bremsverzögerung", null},
                { new Integer(5), null, "Höchstgeschwindigkeit", null},
                { new Integer(6), null, "Mittengeschwindigkeit", null},
                { new Integer(7), null, "Version", null},
                { new Integer(8), null, "Hersteller-ID", null},
                { new Integer(9), null, "PWM-Periode", null},
                { new Integer(10), null, "EMK Cutout", null},
                { new Integer(11), null, "Packet Time-OutPacket Time-Out", null},
                { new Integer(12), null, "Verhalten im Analogmodus", null},
                { new Integer(13), null, "Funktionen im Analogmodus (F1 - F8)", null},
                { new Integer(14), null, "Funktionen im Analogmodus (F9 - F12)", null},
                { new Integer(15), null, "Decoder Lock", null},
                { new Integer(16), null, "Decoder Lock", null},
                { new Integer(17), null, "lange Adresse MSByte", null},
                { new Integer(18), null, "lange Adresse LSByte", null},
                { new Integer(19), null, "Consist-Adresse", null},
                { new Integer(20), null, "Reserviert", null},
                { new Integer(21), null, "Consist Addr Active für F1-F8", null},
                { new Integer(22), null, "Consist Addr Active for F9-F12", null},
                { new Integer(23), null, "Anfahrverz. Adjustment", null},
                { new Integer(24), null, "Bremsverz. Adjustment", null},
                { new Integer(25), null, "Reserviert", null},
                { new Integer(26), null, "Reserviert", null},
                { new Integer(27), null, "Bremsverhalten bei Gleichspannung", null},
                { new Integer(28), null, "RailCom-Einstellungen", null},
                { new Integer(29), null, "Decoder-Einstellungen", null},
                { new Integer(30), null, "Fehlerinformation", null},
                { new Integer(31), null, "Index H", null},
                { new Integer(32), null, "Index L", null},
                { new Integer(33), null, "Zuordnung Ausgänge zu Licht vorwärts", null},
                { new Integer(34), null, "Zuordnung Ausgänge zu Licht rückwärts", null},
                { new Integer(35), null, "Zuordnung Ausgänge zu F1", null},
                { new Integer(36), null, "Zuordnung Ausgänge zu F2", null},
                { new Integer(37), null, "Zuordnung Ausgänge zu F3", null},
                { new Integer(38), null, "Zuordnung Ausgänge zu F4", null},
                { new Integer(39), null, "Zuordnung Ausgänge zu F5", null},
                { new Integer(40), null, "Zuordnung Ausgänge zu F6", null},
                { new Integer(41), null, "Zuordnung Ausgänge zu F7", null},
                { new Integer(42), null, "Zuordnung Ausgänge zu F8", null},
                { new Integer(43), null, "Zuordnung Ausgänge zu F9", null},
                { new Integer(44), null, "Zuordnung Ausgänge zu F10", null},
                { new Integer(45), null, "Zuordnung Ausgänge zu F11", null},
                { new Integer(46), null, "Zuordnung Ausgänge zu F12", null},
                { new Integer(47), null, "Erweiterte Kick-Funktion", null},
                { new Integer(48), null, "Motorspannung bei erweiterter Kickfunktion", null},
                { new Integer(49), null, "Decoder-Einstellungen (Teil 2)", null},
                { new Integer(50), null, "Lastregelparameter Kp (nur LD-G-x)", null},
                { new Integer(51), null, "Lastregelparameter Ki (nur LD-G-x)", null},
                { new Integer(52), null, "Lastregelparameter Kd (nur LD-G-x)", null},
                { new Integer(53), null, "Effekte AUX1", null},
                { new Integer(54), null, "Effekte AUX2", null},
                { new Integer(55), null, "Effekte AUX3", null},
                { new Integer(56), null, "Effekte AUX4", null},
                { new Integer(57), null, "Effekte AUX5", null},
                { new Integer(58), null, "Effekte AUX6", null},
                { new Integer(59), null, "Kickzeit AUX1/AUX2", null},
                { new Integer(60), null, "Kickzeit AUX3/AUX4", null},
                { new Integer(61), null, "Kickzeit AUX5/AUX6", null},
                { new Integer(62), null, "Dimmen AUX1/AUX2", null},
                { new Integer(63), null, "Dimmen AUX3/AUX4", null},
                { new Integer(64), null, "Dimmen AUX5/AUX6", null},
                { new Integer(65), null, "Kick-Start", null},
                { new Integer(66), null, "Vorwärts-Trimm", null},
                { new Integer(67), null, "Alternative Kennl,inie FS 1", null},
                { new Integer(68), null, "Alternative Kennlinie FS 2", null},
                { new Integer(69), null, "Alternative Kennlinie FS 3", null},
                { new Integer(70), null, "Alternative Kennlinie FS 4", null},
                { new Integer(71), null, "Alternative Kennlinie FS 5", null},
                { new Integer(72), null, "Alternative Kennlinie FS 6", null},
                { new Integer(73), null, "Alternative Kennlinie FS 7", null},
                { new Integer(74), null, "Alternative Kennlinie FS 8", null},
                { new Integer(75), null, "Alternative Kennlinie FS 9", null},
                { new Integer(76), null, "Alternative Kennlinie FS 10", null},
                { new Integer(77), null, "Alternative Kennlinie FS 11", null},
                { new Integer(78), null, "Alternative Kennlinie FS 12", null},
                { new Integer(79), null, "Alternative Kennlinie FS 13", null},
                { new Integer(80), null, "Alternative Kennlinie FS 14", null},
                { new Integer(81), null, "Alternative Kennlinie FS 15", null},
                { new Integer(82), null, "Alternative Kennlinie FS 16", null},
                { new Integer(83), null, "Alternative Kennlinie FS 17", null},
                { new Integer(84), null, "Alternative Kennlinie FS 18", null},
                { new Integer(85), null, "Alternative Kennlinie FS 19", null},
                { new Integer(86), null, "Alternative Kennlinie FS 20", null},
                { new Integer(87), null, "Alternative Kennlinie FS 21", null},
                { new Integer(88), null, "Alternative Kennlinie FS 22", null},
                { new Integer(89), null, "Alternative Kennlinie FS 23", null},
                { new Integer(90), null, "Alternative Kennlinie FS 24", null},
                { new Integer(91), null, "Alternative Kennlinie FS 25", null},
                { new Integer(92), null, "Alternative Kennlinie FS 26", null},
                { new Integer(93), null, "Alternative Kennlinie FS 27", null},
                { new Integer(94), null, "Alternative Kennlinie FS 28", null},
                { new Integer(95), null, "Rückwärts-Trimm", null},
                { new Integer(96), null, "Reserviert", null},
                { new Integer(97), null, "Reserviert", null},
                { new Integer(98), null, "Reserviert", null},
                { new Integer(99), null, "Reserviert", null},
                { new Integer(100), null, "Reserviert", null},
                { new Integer(101), null, "Reserviert", null},
                { new Integer(102), null, "Reserviert", null},
                { new Integer(103), null, "Reserviert", null},
                { new Integer(104), null, "Reserviert", null},
                { new Integer(105), null, "Benutzer", null},
                { new Integer(106), null, "Benutzer", null},
                { new Integer(107), null, "Reserviert", null},
                { new Integer(108), null, "Reserviert", null},
                { new Integer(109), null, "Reserviert", null},
                { new Integer(110), null, "Reserviert", null},
                { new Integer(111), null, "Reserviert", null},
                { new Integer(112), null, "Blinkfrequenz", null},
                { new Integer(113), null, "Fahrstufe Übergang zum altern. Dimmen", null},
                { new Integer(114), null, "zweite MM-Adresse", null},
                { new Integer(115), null, "Rangierlicht", null},
                { new Integer(116), null, "Geschwindigkeitsabhängiges Dimmen", null},
                { new Integer(117), null, "Grenze für Überlastabschaltung", null},
                { new Integer(118), null, "Alternatives Dimmen AUX1/AUX2", null},
                { new Integer(119), null, "Alternatives Dimmen AUX3/AUX4", null},
                { new Integer(120), null, "Alternatives Dimmen AUX5/AUX6", null},
                { new Integer(121), null, "FS0: Ausschalten von F0", null},
                { new Integer(122), null, "FS0: Einschalten der Ausgänge", null},
                { new Integer(123), null, "FS0: Ausschalten der Funktionen F1 bis F4", null},
                { new Integer(124), null, "Anpassung Motor <-> Lastregelung", null},
                { new Integer(125), null, null, null},
                { new Integer(126), null, null, null},
                { new Integer(127), null, null, null},
                { new Integer(128), null, null, null},
                { new Integer(129), null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "CV", "Wert", "Bemerkungen", "prog"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setIntercellSpacing(new java.awt.Dimension(3, 9));
        jTable1.setRowHeight(22);
        jTable1.setRowSelectionAllowed(false);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(25);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(25);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(340);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(35);
        }

        jOK.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jOK.setText("OK");
        jOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOKActionPerformed(evt);
            }
        });

        jGruppe_an.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jGruppe_an.setText("alles an");
        jGruppe_an.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGruppe_anActionPerformed(evt);
            }
        });

        jGruppe_2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jGruppe_2.setText("Gruppe2");
        jGruppe_2.setToolTipText("CVs: 33-36, 53-58, 62-64");
        jGruppe_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGruppe_2ActionPerformed(evt);
            }
        });

        jGruppe_1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jGruppe_1.setText("Gruppe1");
        jGruppe_1.setToolTipText("CVs: 1-5, 17-19, 29, 49-52, 65, 114, 124");
        jGruppe_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGruppe_1ActionPerformed(evt);
            }
        });

        jGruppe_aus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jGruppe_aus.setText("alles aus");
        jGruppe_aus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGruppe_ausActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jGruppe_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jGruppe_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jGruppe_an, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jGruppe_aus, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jAbbruch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jOK, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(jGruppe_aus)
                        .addGap(16, 16, 16)
                        .addComponent(jGruppe_1)
                        .addGap(16, 16, 16)
                        .addComponent(jGruppe_2)
                        .addGap(16, 16, 16)
                        .addComponent(jGruppe_an)))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAbbruch)
                    .addComponent(jOK))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jAbbruchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAbbruchActionPerformed
        this.dispose();
    }//GEN-LAST:event_jAbbruchActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        for (int i = 0; i < 255; i++) {
            if(CV_To_Edit_Old[i] == 1)
            {
                CV_To_Edit[i] = 1;
                continue;
            }
            else
            jTable1.setValueAt(false, i, 3);
        }
    }//GEN-LAST:event_jTable1MouseReleased

    private void jOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOKActionPerformed
        if (!bPrint) {
            int k = 0;
            for (int i = 0; i < 254; i++) {
                /*
                if (CV[0].length > k) {
                    if ((i + 1) == CV[0][k]) {
                        Object n = jTable1.getValueAt(i, 1);
                        CV[1][k++] = (Integer) n;
                    }
                }
                */
                Object valueAt = jTable1.getValueAt(i, 3);
                String str = "" + valueAt;
                if( str.equals("true")) {
                    CV_To_Edit[i] = 1;
                    Object n = jTable1.getValueAt(i, 1);
                    int value = 0;
                    try {
                        value = Integer.parseInt(""+n);
                        //value = (Integer) n;
                        setCVvalue( (i+1), value ) ;
                    } catch (Exception ex) {
                        System.out.println("jOKActionPerformed ex "+ ex.getMessage() );
                    }
                }
                else {
                    CV_To_Edit[i] = 0;
                }
            }
        } else {
            try {
                jTable1.print();
            } catch (PrinterException ex) {
                MsgBox messageBox = new MsgBox( (Frame) this.getParent(), true, this);
                messageBox.jLabel1.setText("FEHLER!");
                messageBox.jLabel2.setText("Probleme beim Drucken.");
                messageBox.jLabel3.setText("Ausdruck wird abgebrochen.");
                messageBox.setVisible(true);
                return;
            }
        }
        this.dispose();
    }//GEN-LAST:event_jOKActionPerformed

    private void jGruppe_anActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGruppe_anActionPerformed
        for (int i = 0; i < 255; i++) {
            if(CV_To_Edit_Old[i] == 1)
            {
                CV_To_Edit[i] = 1 ; // = CV_To_Edit_Old[i];
                jTable1.setValueAt(true, i, 3);
            }
        }
    }//GEN-LAST:event_jGruppe_anActionPerformed

    private void jGruppe_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGruppe_2ActionPerformed
        int cvNr ;
        for (int i = 1; i < CV[0].length; i++) {
            cvNr = CV[0][i];
            if( cvNr == 0 )
            continue;
            if( KTUI.checkNumRange(cvNr, 33, 46) )
            {
                CV_To_Edit[cvNr-1] = 1;
            }
            if( KTUI.checkNumRange(cvNr, 53, 58) )
            {
                CV_To_Edit[cvNr-1] = 1;
            }
            if( KTUI.checkNumRange(cvNr, 62, 64) )
            {
                CV_To_Edit[cvNr-1] = 1;
            }
        }
        // Update Column 3
        for (int i = 0; i < 255; i++) {
            if(CV_To_Edit[i] == 1)
            {
                jTable1.setValueAt(true, i, 3);
            }
        }
    }//GEN-LAST:event_jGruppe_2ActionPerformed

    private void jGruppe_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGruppe_1ActionPerformed
        int cvNr;
        for (int i = 1; i < CV[0].length; i++) {
            cvNr = CV[0][i];
            if( cvNr == 0 )
                continue;
            if( KTUI.checkNumRange(cvNr, 1, 5) )
            {
                CV_To_Edit[cvNr-1] = 1;
            }
            if( KTUI.checkNumRange(cvNr, 17, 19) )
            {
                CV_To_Edit[cvNr-1] = 1;
            }
            if(cvNr == 29)
            {
                CV_To_Edit[cvNr-1] = 1;
            }
            if( KTUI.checkNumRange(cvNr, 49, 52) )
            {
                CV_To_Edit[cvNr-1] = 1;
            }
            if(cvNr == 65)
            {
                CV_To_Edit[cvNr-1] = 1;
            }
            if(cvNr == 114)
            {
                CV_To_Edit[cvNr-1] = 1;
            }
            if(cvNr == 124)
            {
                CV_To_Edit[cvNr-1] = 1;
            }
        }
        // Update Column 3
        for (int i = 0; i < 255; i++) {
            if(CV_To_Edit[i] == 1)
            {
                jTable1.setValueAt(true, i, 3);
            }
        }
    }//GEN-LAST:event_jGruppe_1ActionPerformed

    private void jGruppe_ausActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGruppe_ausActionPerformed
        for (int i = 0; i < 255; i++) {
            jTable1.setValueAt(false, i, 3);
            CV_To_Edit[i] = 0;
        }
    }//GEN-LAST:event_jGruppe_ausActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        int k = 0;
        CV_To_Edit_Old = new byte[256];
        switch(Decoder)
        {
            case c.FD_M: //FD-M
                jTable1.setValueAt(" ", 46, 2);
                jTable1.setValueAt(" ", 47, 2);

                jTable1.setValueAt("Dimmen AUX1", 48, 2);
                jTable1.setValueAt("Dimmen AUX2", 49, 2);
                jTable1.setValueAt("Dimmen AUX3", 50, 2);
                jTable1.setValueAt("Dimmen AUX4", 51, 2);

                jTable1.setValueAt("Kickzeit AUX1", 56, 2);
                jTable1.setValueAt("Kickzeit AUX2", 57, 2);
                jTable1.setValueAt("Kickzeit AUX3", 58, 2);
                jTable1.setValueAt("Kickzeit AUX4", 59, 2);

                jTable1.setValueAt("Blinken AUX1", 60, 2);
                jTable1.setValueAt("Blinken AUX2", 61, 2);
                jTable1.setValueAt("Blinken AUX3", 62, 2);
                jTable1.setValueAt("Blinken AUX4", 63, 2);

                jTable1.setValueAt("Analoge Umschaltspannung", 112, 2);
                for (int i = 114; i < 255; i++) {
                    jTable1.setValueAt(" ", i, 2);
                }
                break;

            case c.FD_R: //FD-R
                jTable1.setValueAt(" ", 46, 2);
                jTable1.setValueAt(" ", 47, 2);

                jTable1.setValueAt("Dimmen AUX1", 48, 2);
                jTable1.setValueAt("Dimmen AUX2", 49, 2);
                jTable1.setValueAt(" ", 50, 2);
                jTable1.setValueAt(" ", 51, 2);

                jTable1.setValueAt(" ", 56, 2);
                jTable1.setValueAt(" ", 57, 2);
                jTable1.setValueAt(" ", 58, 2);
                jTable1.setValueAt(" ", 59, 2);

                jTable1.setValueAt("Blinken AUX1", 60, 2);
                jTable1.setValueAt("Blinken AUX2", 61, 2);
                jTable1.setValueAt(" ", 62, 2);
                jTable1.setValueAt(" ", 63, 2);

                jTable1.setValueAt(" ", 112, 2);
                for (int i = 114; i < 255; i++) {
                    jTable1.setValueAt(" ", i, 2);
                }
                break;

            case c.FD_XL: //FD-XL
                jTable1.setValueAt(" ", 46, 2);
                jTable1.setValueAt(" ", 47, 2);

                jTable1.setValueAt(" ", 49, 2);
                jTable1.setValueAt(" ", 50, 2);
                jTable1.setValueAt(" ", 51, 2);

                jTable1.setValueAt(" ", 116, 2);

                for (int i = 124; i < 255; i++) {
                    jTable1.setValueAt(" ", i, 2);
                }
                break;

            case c.FD_LED: //FD-LED
                jTable1.setValueAt(" ", 1, 2);
                jTable1.setValueAt(" ", 2, 2);
                jTable1.setValueAt(" ", 3, 2);
                jTable1.setValueAt("Spannungsreduzierung AUX1", 4, 2);
                jTable1.setValueAt("Spannungsreduzierung AUX2", 5, 2);
                for (int i = 8; i < 16; i++) {
                    jTable1.setValueAt(" ", i, 2);
                }
                jTable1.setValueAt("Consistadresse", 18, 2);
                for (int i = 19; i < 28; i++) {
                    jTable1.setValueAt(" ", i, 2);
                }
                for (int i = 30; i < 32; i++) {
                    jTable1.setValueAt(" ", i, 2);
                }
                for( int i = 34 ; i <= 61 ; i++ ) { // CV45 -> F1 bis CV62 -> F28
                    jTable1.setValueAt("Zuordnung der Ausgänge zu F"+(i-33), i, 2);
                }
                for (int i = 62; i < 255; i++) {
                    jTable1.setValueAt(" ", i, 2);
                }
                break;

            case c.WIB_30: //WIB
                jTable1.setValueAt(" ", 1, 2);
                jTable1.setValueAt(" ", 2, 2);
                jTable1.setValueAt(" ", 3, 2);
                jTable1.setValueAt(" ", 4, 2);
                jTable1.setValueAt(" ", 5, 2);
                jTable1.setValueAt(" ", 8, 2);
                jTable1.setValueAt(" ", 9, 2);
                jTable1.setValueAt(" ", 10, 2);
                jTable1.setValueAt(" ", 11, 2);
                jTable1.setValueAt(" ", 13, 2);
                jTable1.setValueAt(" ", 14, 2);
                jTable1.setValueAt(" ", 15, 2);
                jTable1.setValueAt(" ", 19, 2);
                jTable1.setValueAt(" ", 20, 2);
                jTable1.setValueAt(" ", 21, 2);
                jTable1.setValueAt(" ", 22, 2);
                jTable1.setValueAt(" ", 23, 2);
                jTable1.setValueAt(" ", 24, 2);
                jTable1.setValueAt(" ", 25, 2);
                jTable1.setValueAt(" ", 26, 2);
                jTable1.setValueAt(" ", 29, 2);
                jTable1.setValueAt(" ", 30, 2);
                jTable1.setValueAt(" ", 31, 2);
                jTable1.setValueAt(" ", 46, 2);
                jTable1.setValueAt(" ", 47, 2);
                jTable1.setValueAt(" ", 48, 2);
                jTable1.setValueAt(" ", 49, 2);
                jTable1.setValueAt(" ", 40, 2);
                jTable1.setValueAt(" ", 50, 2);
                jTable1.setValueAt(" ", 51, 2);
                jTable1.setValueAt("Effekte LED1+2", 52, 2);
                jTable1.setValueAt("Effekte LED3+4", 53, 2);
                jTable1.setValueAt("Effekte LED5+6", 54, 2);
                jTable1.setValueAt("Effekte LED7+8", 55, 2);
                jTable1.setValueAt("Effekte AUX1+2", 56, 2);
                jTable1.setValueAt("Effekte AUX3", 57, 2);
                jTable1.setValueAt("Dimmen LED1+2", 58, 2);
                jTable1.setValueAt("Dimmen LED3+4", 59, 2);
                jTable1.setValueAt("Dimmen LED5+6", 60, 2);
                jTable1.setValueAt("Dimmen LED7+8", 61, 2);
                jTable1.setValueAt("Dimmen AUX1+2", 62, 2);
                jTable1.setValueAt("Dimmen AUX3", 63, 2);
                for(int i = 64; i < 111; i++)
                {
                    jTable1.setValueAt(" ", i, 2);
                }
                jTable1.setValueAt("F-Tasten für Dämmerungsschalter", 111, 2);
                jTable1.setValueAt("Empfindlichkeit Dämmerungsschalter", 112, 2);
                jTable1.setValueAt("Konfigurationsdaten 2", 114, 2);
                jTable1.setValueAt(" ", 115, 2);
                jTable1.setValueAt(" ", 116, 2);
                jTable1.setValueAt("F-Tasten für Orientierungslicht", 117, 2);
                jTable1.setValueAt("Empfindlichkeit Orientierungslicht", 118, 2);
                jTable1.setValueAt(" ", 119, 2);
                jTable1.setValueAt("F-Tasten für AUX1", 120, 2);
                jTable1.setValueAt("F-Tasten für AUX2", 121, 2);
                jTable1.setValueAt("F-Tasten für AUX3", 122, 2);
                jTable1.setValueAt("Kickzeit AUX1+3", 123, 2);
                jTable1.setValueAt("defekte Leuchtstoffröhre", 124, 2);
                jTable1.setValueAt("Einschaltzeit Leuchtstoffröhre 1+2", 125, 2);
                jTable1.setValueAt("Einschaltzeit Leuchtstoffröhre 3+4", 126, 2);
                jTable1.setValueAt("Einschaltzeit Leuchtstoffröhre 5+6", 127, 2);
                jTable1.setValueAt("Einschaltzeit Leuchtstoffröhre 7+8", 128, 2);
                jTable1.setValueAt("Voreinstellung", 129, 2);
               break;

            case c.FD_R_ex: //FD-R extended
                jTable1.setValueAt("zweite MM-Adresse", 46, 2);
                jTable1.setValueAt("Abschalten bei Überlast", 47, 2);
                jTable1.setValueAt("Konfigurations Variable 2", 46, 2);
                jTable1.setValueAt("Hilfsregister für CV-Nummern", 49, 2);
                jTable1.setValueAt("Hilfsregiter für Werte", 50, 2);
                jTable1.setValueAt(" ", 51, 2);
                jTable1.setValueAt("Effekte AUX1", 52, 2);
                jTable1.setValueAt("Effekte AUX2", 53, 2);
                jTable1.setValueAt("Effekte AUX3", 54, 2);
                jTable1.setValueAt("Effekte AUX4", 55, 2);
                jTable1.setValueAt("Effekte AUX5", 56, 2);
                jTable1.setValueAt("Effekte AUX6", 57, 2);
                jTable1.setValueAt("Funktion Mapping Eingang 1 (Ausgänge)", 58, 2);
                jTable1.setValueAt("Funktion Mapping Eingang 1 (Sounds + Servo)", 59, 2);
                jTable1.setValueAt("Funktion Mapping Eingang 2 (Ausgänge)", 60, 2);
                jTable1.setValueAt("Funktion Mapping Eingang 2 (Sounds + Servo)", 61, 2);
                jTable1.setValueAt("Funktion Mapping Eingang 3 (Ausgänge)", 62, 2);
                jTable1.setValueAt("Funktion Mapping Eingang 3 (Sounds)", 63, 2);
                jTable1.setValueAt(" ", 64, 2);
                jTable1.setValueAt(" ", 65, 2);
                jTable1.setValueAt(" ", 94, 2);
                jTable1.setValueAt(" ", 95, 2);
                jTable1.setValueAt(" ", 96, 2);
                jTable1.setValueAt(" ", 97, 2);
                jTable1.setValueAt(" ", 98, 2);
                jTable1.setValueAt(" ", 99, 2);
                jTable1.setValueAt(" ", 100, 2);
                jTable1.setValueAt(" ", 101, 2);
                jTable1.setValueAt(" ", 102, 2);
                jTable1.setValueAt(" ", 103, 2);
                jTable1.setValueAt(" ", 104, 2);
                jTable1.setValueAt("Blinkfrequenz AUX1", 115, 2);
                jTable1.setValueAt("Blinkfrequenz AUX2", 116, 2);
                jTable1.setValueAt("Blinkfrequenz AUX3", 117, 2);
                jTable1.setValueAt("Blinkfrequenz AUX4", 118, 2);
                jTable1.setValueAt("Blinkfrequenz AUX5", 109, 2);
                jTable1.setValueAt("Blinkfrequenz AUX6", 110, 2);
                jTable1.setValueAt("Blinkfrequenz MARs", 111, 2);
                jTable1.setValueAt("Fahrstufe für alternatives Dimmen", 112, 2);
                jTable1.setValueAt("Ausgänge für alt. Dimmen", 113, 2);
                jTable1.setValueAt("Dimmen AUX1", 114, 2);
                jTable1.setValueAt("Dimmen AUX2", 115, 2);
                jTable1.setValueAt("Dimmen AUX3", 116, 2);
                jTable1.setValueAt("Dimmen AUX4", 117, 2);
                jTable1.setValueAt("Mindesteinschaltdauer Eingang 1", 118, 2);
                jTable1.setValueAt("Mindesteinschaltdauer Eingang 2", 119, 2);
                jTable1.setValueAt("Mindesteinschaltdauer Eingang 3", 120, 2);
                jTable1.setValueAt("", 121, 2);
                jTable1.setValueAt("alternatives Dimmen AUX1", 122, 2);
                jTable1.setValueAt("alternatives Dimmen AUX2", 123, 2);
                jTable1.setValueAt("alternatives Dimmen AUX3", 124, 2);
                jTable1.setValueAt("alternatives Dimmen AUX4", 125, 2);
                jTable1.setValueAt("", 126, 2);
                jTable1.setValueAt("", 127, 2);
                jTable1.setValueAt("", 128, 2);
                jTable1.setValueAt("", 129, 2);
                jTable1.setValueAt("Rangierlicht", 130, 2);
                jTable1.setValueAt("Blinken -> ON-Time AUX1", 131, 2);
                jTable1.setValueAt("Blinken -> ON-Time AUX2", 132, 2);
                jTable1.setValueAt("Blinken -> ON-Time AUX3", 133, 2);
                jTable1.setValueAt("Blinken -> ON-Time AUX4", 134, 2);
                jTable1.setValueAt("Blinken -> ON-Time AUX5", 135, 2);
                jTable1.setValueAt("Blinken -> ON-Time AUX6", 136, 2);
                jTable1.setValueAt("", 137, 2);
                jTable1.setValueAt("", 138, 2);
                jTable1.setValueAt("Doppel-Blinken -> Pause AUX1", 139, 2);
                jTable1.setValueAt("Doppel-Blinken -> Pause AUX2", 140, 2);
                jTable1.setValueAt("Doppel-Blinken -> Pause AUX3", 141, 2);
                jTable1.setValueAt("Doppel-Blinken -> Pause AUX4", 142, 2);
                jTable1.setValueAt("Doppel-Blinken -> Pause AUX5", 143, 2);
                jTable1.setValueAt("Doppel-Blinken -> Pause AUX6", 144, 2);
                jTable1.setValueAt("", 145, 2);
                jTable1.setValueAt("", 146, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F1/F13", 147, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F2/F14", 148, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F3/F15", 149, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F4/F16", 150, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F5/F17", 151, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F6/F18", 152, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F7/F19", 153, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F8/F20", 154, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F9/F21", 155, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F10/F22", 156, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F11/F23", 157, 2);
                jTable1.setValueAt("Funktion Mapping SOUND F12/F24", 157, 2);
                jTable1.setValueAt("Lautstärke Abschwächung", 159, 2);
                jTable1.setValueAt("", 160, 2);
                jTable1.setValueAt("Kickzeit vorwärts", 161, 2);
                jTable1.setValueAt("Kickzeit rückwärts", 162, 2);
                jTable1.setValueAt("", 163, 2);
                jTable1.setValueAt("", 164, 2);
                jTable1.setValueAt("", 165, 2);
                jTable1.setValueAt("F5 bis F12 für Servo-Ausgang", 166, 2);
                jTable1.setValueAt("Servoausgang ein", 167, 2);
                jTable1.setValueAt("linker Anschlag Servo", 168, 2);
                jTable1.setValueAt("rechter Anschlag Servo", 169, 2);
                jTable1.setValueAt("Geschwindigkeit des Servo", 170, 2);
                jTable1.setValueAt("letzte Position des Servo", 171, 2);
                jTable1.setValueAt("Ausschalten von F0 bei FS 0", 172, 2);
                jTable1.setValueAt("Einschalten von AUX bei FS0", 173, 2);
                jTable1.setValueAt("Ausschalten von AUX bei FS0", 174, 2);
                jTable1.setValueAt("Invertieren von AUX bei FS0", 175, 2);
                jTable1.setValueAt("", 176, 2);
                jTable1.setValueAt("", 177, 2);
                jTable1.setValueAt("", 178, 2);
                jTable1.setValueAt("Funktion mapping F13", 179, 2);
                jTable1.setValueAt("Funktion mapping F14", 180, 2);
                jTable1.setValueAt("Funktion mapping F15", 181, 2);
                jTable1.setValueAt("Funktion mapping F16", 182, 2);
                jTable1.setValueAt("Funktion mapping F17", 183, 2);
                jTable1.setValueAt("Funktion mapping F18", 184, 2);
                jTable1.setValueAt("Funktion mapping F19", 185, 2);
                jTable1.setValueAt("Funktion mapping F20", 186, 2);
                jTable1.setValueAt("Funktion mapping F21", 187, 2);
                jTable1.setValueAt("Funktion mapping F22", 188, 2);
                jTable1.setValueAt("Funktion mapping F23", 189, 2);
                jTable1.setValueAt("Funktion mapping F24", 190, 2);
                jTable1.setValueAt("Funktion mapping F25", 191, 2);
                jTable1.setValueAt("Funktion mapping F26", 192, 2);
                jTable1.setValueAt("Funktion mapping F27", 193, 2);
                jTable1.setValueAt("Funktion mapping F28", 194, 2);
               break;
        }
        if(bPrint)
        {
            jOK.setText("Drucken");
        }
        for (int i = 0; i < 255; i++) {
            CV_To_Edit_Old[i] = CV_To_Edit[i];
            jTable1.setValueAt(i+1, i, 0);
            int cvVal = getValueForCV( i+1 );
            if( cvVal != -1 ) {
                jTable1.setValueAt(cvVal, i, 1);
            }
            if(CV_To_Edit[i] == 1)
            {
                jTable1.setValueAt(true, i, 3);
            }
            else
                jTable1.setValueAt(false, i, 3);
        }
    }//GEN-LAST:event_formWindowOpened

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAbbruch;
    private javax.swing.JButton jGruppe_1;
    private javax.swing.JButton jGruppe_2;
    private javax.swing.JButton jGruppe_an;
    private javax.swing.JButton jGruppe_aus;
    private javax.swing.JButton jOK;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
