package my.KlarText;

/**
 *
 * @author lroth
 */
public class HelpInfoWasIstWas extends javax.swing.JDialog {

    private MC myParent = null;
    /**
     * Creates new form helpWasIstWas
     */
    public HelpInfoWasIstWas(MC parent, boolean modal) {
        super(parent, modal);
        initComponents();

        if( parent == null ) {
            return;
        }
        if( parent.frameInstanceHelpWIW != null ) {
            parent.frameInstanceHelpWIW.toFront();
            parent.frameInstanceHelpWIW.repaint();
            return;
        }
        parent.frameInstanceHelpWIW = this;
        setLocationRelativeTo(parent);
        myParent = parent;

        // set to top to avoid scrolling to bottom
        this.jTextPane1.setCaretPosition(0);
        this.setResizable(true);
        this.pack();

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        helpWIWclose = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Was ist Was (Dateinamen)");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        helpWIWclose.setText("Schließen");
        helpWIWclose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpWIWcloseActionPerformed(evt);
            }
        });

        jTextPane1.setEditable(false);
        jTextPane1.setContentType("text/html"); // NOI18N
        jTextPane1.setText("<html>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>Die Zusammensetzung der Datenamen der Update-Dateien...</b><br>\n      <br>\nDer <u>Basisname</u> -> <b>Geräteauswahl</b>:<br>\n<b>Master</b> ist ausschließlich für die <b>MasterControl (die Zentrale)</b>.<br>\n<b>Control</b> ist für <b>LokControl, HandControl, SniffControl und PhoneControl</b>.<br>\nMC-Control ist eine Firmware, die die MC zur LokControl degradiert. Um eine degradierte MasterControl wieder aufzuwerten, einfach die Master-Datei aufspielen.<br>\n<b>mControl</b> ist die Firmware für die <b>mControl</b><br>\n<b>xpressnet</b> ist für die <b>XNControl</b>.<br>\n<br>\nDie <u>Zahl direkt nach dem Namen</u> -> <b>Hardwareversion</b>:<br>\nDies ist der Hardware-Stand. Es sind wenige LokControl im Umlauf, die nicht dem derzeitigen Hardware-Stand (13) entsprechen. Diese müssen mit der entsprechenden Datei upgedatet werden. Welche Datei genommen werden muss, kann man im Display der LokControl erkennen. Wenn dort also HW=10 steht, muss Control10-1 (oder -2) genommen werden.<br>\nBei xpressnet (XNControl) steht hier immer 110<br>\n<br>\nDie <u>einstellige Zahl am Ende</u> (durch \"-\" getrennt):<br>\nEs gibt zwei Sprachvarianten der Firmware. Diese sind mit \"-1\" und \"-2\" gekennzeichnet.<br>\nVariante \"-1\" enthält Deutsch, Englisch, Französisch und Niederländisch.<br>\nVariante \"-2\" enthält Deutsch, Englisch, Italienisch und Spanisch.<br>\nFür Deutsche und Engländer ist es also egal, welche Version genommen wird.<br>\n<br>\nDie <u>mehrstellige Zahl am Ende</u> (durch \"-\" getrennt):<br>\nFür XNControl und mControl steht am Ende die Versionsnummer.<br>\n<br>\nWeitere durch <u>Unterstrich angehängte Zahlen</u> (meist durch \"_V\" getrennt):<br>\nDas kennzeichnet in der Regel offizielle Versionen (z.B. _V1_4_8).<br>\n<br>\nEndung <u>hex</u> (durch \".\" getrennt):<br>\nDas ist die verwendete Endung um Update-Dateien zu kennzeichnen.<br>\n    </p>\n  </body>\n</html>\n");
        jScrollPane2.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(548, Short.MAX_VALUE)
                .addComponent(helpWIWclose)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpWIWclose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void helpWIWcloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpWIWcloseActionPerformed
        if( myParent != null ) {
            myParent.frameInstanceHelpWIW = null;
        }
        this.dispose();
    }//GEN-LAST:event_helpWIWcloseActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if( myParent != null ) {
            myParent.frameInstanceHelpWIW = null;
        }
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton helpWIWclose;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
