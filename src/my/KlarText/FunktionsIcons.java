/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.KlarText;

import java.awt.Point;
import java.awt.Rectangle;
import javax.swing.DefaultCellEditor;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author ktams
 */
public class FunktionsIcons extends javax.swing.JFrame {

    /**
     * Creates new form FunktionsIcons
     */
    
    public int DecAdress;
    public String DecName;
    public String DecIcons[];
    public MC KTUI;
    
    private String IconString;
    private String[] OriginalIconString;
    private String IconNames[];
    
    public FunktionsIcons() {
        this.IconNames = new String[]{};
        initComponents();
        setVisible(true);
    }

    FunktionsIcons(MC aThis) {
        this.IconNames = new String[]{
            "",
            "---",
            "Stirnbeleuchtung",
            "Innenraumbeleuchtung",
            "Führerstandsbeleuchtung",
            "Fahrgeräusch (Motorgeräusch)",
            "Allgemeines Geräusch",
            "Bahnhofsdurchsage",
            "Rangiergang",
            "ABV (Anfahr/Bremszeit aus)",
            "Automatische Kupplung",
            "Rauchgenerator",
            "Panthograph",
            "Fernlicht",
            "Glocke",
            "Horn (Hupe)",
            "Pfeife",
            "Türen auf/zu",
            "Lüfter",
            "Kohle Schaufeln",
            "Erweiterungstaste (Shift)",
            "Zugzielanzeige",
            "Bremsenquitschen",
            "Kranarm heben/senken",
            "Kranhaken heben/senken",
            "Triebwerksbeleuchtung",
            "Kran drehen",
            "Dampf ablassen (Zylinderdampf)",
            "Betriebsfunk",
            "Kupplungsgeräusch",
            "Schienenstoß",
            "Diesel Fahrstufe Auf",
            "Diesel Fahrstufe Ab",
            "Schaffnerpfiff",
            "Pufferstoß",
            "Führerstandsbeleuchtung 2",
            "Wasser fassen (Dampflok)",
            "Kurvengeräusch",
            "Weichengeräusch",
            "Sicherheitsventil",
            "Ölbrenner",
            "Stoker",
            "Dynamische Bremse",
            "Kompressor",
            "Pressluft ablassen",
            "Handbremse",
            "Luftpumpe (Dampflok)",
            "Wasserpumpe (Dampflok)",
            "Hauptschalter (E-Lok)",
            "Ditchlight",
            "Marslight",
            "Gyralight",
            "Rule 17",
            "Rotary Beacon",
            "Feuerbüchse",
            "Ölkühler",
            "Sanden",
            "Abschlammen",
            "Bremse setzen (Lösen automatisch)",
            "Rangierbeleuchtung",
            "Führerpultbeleuchtung",
            "Injektor",
            "Hilfsdiesel",
            "Rücklicht rot",
            "Dopplereffekt",
            "Kurzpfiff",
            "Ölpumpe (Dampflok)",
            "Heizung",
            "Lichtmaschine (Dampflok)",
            "Dieselpumpe",
            "Fahrtrichtungsumschalter",
            "Hilfsluftpresser",
            "Vorschmieren",
            "Sifa-Meldung",
            "Schaltstufe (E-Lok)",
            "Beleuchtung allgemein",
            "stromleitende Kupplung"
        };
        initComponents();
        KTUI = aThis;
        setTitle( "Function Icons" );
        setLocationRelativeTo(aThis);
        setVisible(true);
        KTUI.bFunktionsIconsIsActiv = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jIconNames = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jDecAdr = new javax.swing.JLabel();
        jName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jIconTable = new javax.swing.JTable();

        jIconNames.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "            ---", "            Stirnbeleuchtung", "            Innenraumbeleuchtung", "            Führerstandsbeleuchtung", "            Fahrgeräusch (Motorgeräusch)", "            Allgemeines Geräusch", "            Bahnhofsdurchsage", "            Rangiergang", "            ABV (Anfahr/Bremszeit aus)", "            Automatische Kupplung", "            Rauchgenerator", "            Panthograph", "            Fernlicht", "            Glocke", "            Horn (Hupe)", "            Pfeife", "            Türen auf/zu", "            Lüfter", "            Kohle Schaufeln", "            Erweiterungstaste (Shift)", "            Zugzielanzeige", "            Bremsenquitschen", "            Kranarm heben/senken", "            Kranhaken heben/senken", "            Triebwerksbeleuchtung", "            Kran drehen", "            Dampf ablassen (Zylinderdampf)", "            Betriebsfunk", "            Kupplungsgeräusch", "            Schienenstoß", "            Diesel Fahrstufe Auf", "            Diesel Fahrstufe Ab", "            Schaffnerpfiff", "            Pufferstoß", "            Führerstandsbeleuchtung 2", "            Wasser fassen (Dampflok)", "            Kurvengeräusch", "            Weichengeräusch", "            Sicherheitsventil", "            Ölbrenner", "            Stoker", "            Dynamische Bremse", "            Kompressor", "            Pressluft ablassen", "            Handbremse", "            Luftpumpe (Dampflok)", "            Wasserpumpe (Dampflok)", "            Hauptschalter (E-Lok)", "            Ditchlight", "            Marslight", "            Gyralight", "            Rule 17", "            Rotary Beacon", "            Feuerbüchse", "            Ölkühler", "            Sanden", "            Abschlammen", "            Bremse setzen (Lösen automatisch)", "            Rangierbeleuchtung", "            Führerpultbeleuchtung", "            Injektor", "            Hilfsdiesel", "            Rücklicht rot", "            Dopplereffekt", "            Kurzpfiff", "            Ölpumpe (Dampflok)", "            Heizung", "            Lichtmaschine (Dampflok)", "            Dieselpumpe", "            Fahrtrichtungsumschalter", "            Hilfsluftpresser", "            Vorschmieren", "            Sifa-Meldung", "            Schaltstufe (E-Lok)", "            Beleuchtung allgemein", "            stromleitende Kupplung" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("my/KlarText/Bundle"); // NOI18N
        jButton1.setText(bundle.getString("FunktionsIcons.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(bundle.getString("FunktionsIcons.jLabel1.text")); // NOI18N

        jDecAdr.setText(bundle.getString("FunktionsIcons.jDecAdr.text")); // NOI18N

        jName.setText(bundle.getString("FunktionsIcons.jName.text")); // NOI18N

        jIconTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { Integer.valueOf(0), null, null},
                { Integer.valueOf(1), null, null},
                { Integer.valueOf(2), null, null},
                { Integer.valueOf(3), null, null},
                { Integer.valueOf(4), null, null},
                { Integer.valueOf(5), null, null},
                { Integer.valueOf(6), null, null},
                { Integer.valueOf(7), null, null},
                { Integer.valueOf(8), null, null},
                { Integer.valueOf(9), null, null},
                { Integer.valueOf(10), null, null},
                { Integer.valueOf(11), null, null},
                { Integer.valueOf(12), null, null},
                { Integer.valueOf(13), null, null},
                { Integer.valueOf(14), null, null},
                { Integer.valueOf(15), null, null},
                { Integer.valueOf(16), null, null},
                { Integer.valueOf(17), null, null},
                { Integer.valueOf(18), null, null},
                { Integer.valueOf(19), null, null},
                { Integer.valueOf(20), null, null},
                { Integer.valueOf(21), null, null},
                { Integer.valueOf(22), null, null},
                { Integer.valueOf(23), null, null},
                { Integer.valueOf(24), null, null},
                { Integer.valueOf(25), null, null},
                { Integer.valueOf(26), null, null},
                { Integer.valueOf(27), null, null},
                { Integer.valueOf(28), null, null},
                { Integer.valueOf(29), null, null},
                { Integer.valueOf(30), null, null},
                { Integer.valueOf(31), null, null},
                { Integer.valueOf(32), null, null},
                { Integer.valueOf(33), null, null},
                { Integer.valueOf(34), null, null}
            },
            new String [] {
                "Funktion", "Icon-No", "Beschreibung"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jIconTable.setRowHeight(20);
        jIconTable.getTableHeader().setReorderingAllowed(false);
        jIconTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jIconTableMouseClicked(evt);
            }
        });
        jIconTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jIconTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jIconTable);
        if (jIconTable.getColumnModel().getColumnCount() > 0) {
            jIconTable.getColumnModel().getColumn(0).setResizable(false);
            jIconTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("FunktionsIcons.jIconTable.columnModel.title0")); // NOI18N
            jIconTable.getColumnModel().getColumn(1).setResizable(false);
            jIconTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("FunktionsIcons.jIconTable.columnModel.title1")); // NOI18N
            jIconTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("FunktionsIcons.jIconTable.columnModel.title2")); // NOI18N
            jIconTable.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(jIconNames));
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDecAdr)
                                .addGap(59, 59, 59)
                                .addComponent(jName))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDecAdr)
                    .addComponent(jName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        KTUI.bFunktionsIconsIsActiv = false;
    }//GEN-LAST:event_formWindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jIconTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);        
        TableColumn col = jIconTable.getColumnModel().getColumn(0);
        col.setPreferredWidth(60);
        col = jIconTable.getColumnModel().getColumn(1);
        col.setPreferredWidth(60);
        col = jIconTable.getColumnModel().getColumn(2);
        col.setPreferredWidth(jIconTable.getWidth() - 120);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        jIconTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        jIconTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );

        IconString = "";
        if(DecIcons[0].indexOf(" ") != -1)
        {
            for (String DecIcon : DecIcons) {
                String s = DecIcon.substring(0, DecIcon.indexOf(" "));
                try {
                    int n = Integer.parseInt(s);
                    if (n == DecAdress) {
                        IconString += DecIcon.substring(DecIcon.indexOf(" ") + 1, DecIcon.length()) + " ";
                    }
                }catch (NumberFormatException numberFormatException) {
                }
            }
            OriginalIconString = new String[DecIcons.length + 1];
            for(int i = 0; i < DecIcons.length; i++)
                OriginalIconString[i] = DecIcons[i];
            OriginalIconString[DecIcons.length] = "" + DecAdress;
        }
        for(int i = 0; i < 33; i++)
        {
            jIconTable.setValueAt("---", i, 1);
        }
        if(IconString != null)
        {
            while (IconString.length() > 2)
            {
                String s = IconString.substring(0, IconString.indexOf(","));
                int parseInt = 0;
                try {
                    parseInt = Integer.parseInt(s);
                    IconString = IconString.substring(IconString.indexOf(",") + 1, IconString.length());
                    int Index = 0;
                    Index = IconString.indexOf(" ");
                    int parseInt1 = 0;
                    if(Index != -1)
                    {
                        parseInt1 = Integer.parseInt(IconString.substring(0, Index));
                    }
                    else
                    {
                        parseInt1 = Integer.parseInt(IconString);
                    }
                    if(parseInt1 == 0)
                    {
                        jIconTable.setValueAt("---", parseInt, 1);
                        jIconTable.setValueAt("", parseInt, 2);
                        continue;
                    }
                    jIconTable.setValueAt(""+parseInt1, parseInt, 1);
                    jIconTable.setValueAt(IconNames[parseInt1 - 1], parseInt, 2);
                    IconString = IconString.substring(IconString.indexOf(" ")+1, IconString.length());
                } catch (NumberFormatException numberFormatException) {
                }
            }
        }
        jDecAdr.setText("Decoder Adr: " + DecAdress);
        jName.setText("Decoder Name: " + DecName);
    }//GEN-LAST:event_formWindowOpened

    private void jIconTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jIconTablePropertyChange
        int edRow = jIconTable.getEditingRow();
        if( edRow >= 0)
        {
            int selectedIndex = jIconNames.getSelectedIndex();
            if(selectedIndex > 0)
            {
                jIconTable.setValueAt("" + (selectedIndex+2), edRow, 1);
                OriginalIconString[DecIcons.length] += (" " + edRow + "," + (selectedIndex + 2));
            }
            else
            {
                jIconTable.setValueAt("---", edRow, 1);
                OriginalIconString[DecIcons.length] += (" " + edRow + "," + selectedIndex);
            }
            KTUI.FuncIcons = OriginalIconString;
        }
        else
        {
            Rectangle bounds = jIconNames.getBounds();
            if(bounds.x > 0)
            {
                int n = bounds.y / bounds.height;
                if(n < jIconNames.getItemCount())
                {
                    Object valueAt = jIconTable.getValueAt(n, 1);
                    int i = 0;
                    try {
                        i = Integer.parseInt((String) valueAt);
                        jIconNames.setSelectedIndex(i-2);
                    } catch (NumberFormatException numberFormatException) {
                    }
                }
            }
        }
    }//GEN-LAST:event_jIconTablePropertyChange

    private void jIconTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jIconTableMouseClicked
    }//GEN-LAST:event_jIconTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FunktionsIcons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FunktionsIcons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FunktionsIcons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FunktionsIcons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FunktionsIcons().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jDecAdr;
    private javax.swing.JComboBox jIconNames;
    private javax.swing.JTable jIconTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jName;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
