/*
 * ReadWriteCV.java
 *
 *
 * @author Kersten Tams Copyright 2009-2018
 * @author Lothar Roth  Copyright 2012-2018
 *
 */

package my.CVNavi;

import java.awt.Cursor;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import static my.CVNavi.CVNavi.debugLevel;

/**
 *
 * @author Lothar
 */
public class ReadWriteCV extends javax.swing.JDialog {

    public int DecAdr;
    public int CV[][];
    byte[] bArray;
    public int bytesRead;
    public int Decoder;
    private byte CV_To_Edit[];
    private TwoWaySerialComm Com;
    private boolean bAbbruch;
    private int n;
    private int currCV;
    private int nTimeOut;
    private boolean bLeseCV;         // einzelne CV
    private boolean bSchreibeCV;     // einzelne CV
    private boolean bListeLesen;     // Liste von CVs
    private boolean bListeSchreiben; // Liste von CVs
    private boolean bWaitAnswerInProgresss;
    private Timer timer;
    private CVNavi CVNavi;
    private int retries;
    private int cvAnfrage;
    private int cvSchreiben;
    private int cvWert;
    private ResourceBundle bundle;

    /**
     * Creates new form ReadWriteCV
     * @throws java.io.IOException
     */
    public ReadWriteCV(Frame parent, boolean modal, CVNavi cvnavi, int[][] CV ) throws IOException {
        super(parent, modal);
        this.bArray = new byte[c.MAX_CV+1];
        this.DecAdr = 3;
        this.CV = CV;
        this.bytesRead = 0;
        this.Decoder = 0;
        this.CV_To_Edit = null;
        this.Com = null;
        this.bAbbruch = false;
        this.n = 0;
        this.currCV = 0;
        this.nTimeOut = 0;
        this.bLeseCV = false;
        this.bSchreibeCV = false;
        this.timer = null;
        this.CVNavi = cvnavi;
        this.cvAnfrage = -1;
        this.cvSchreiben = -1;
        this.cvWert = -1;
        this.bWaitAnswerInProgresss = false;

        if( CVNavi != null ) {
            this.Decoder = CVNavi.Decoder;
            initComponents();
            pack();
            bundle = java.util.ResourceBundle.getBundle("my.CVNavi/Bundle");
            setLocationRelativeTo(parent);
            setVisible(true);
        } else {
            dispose();
            return;
        }
    }

    private void startIOAction() {
        bAbbruch = false;
        // set buttons for IO in progress
        jAbbrechen.setEnabled(true);

        jCVnr.setEnabled(false);
        jCVwert.setEnabled(false);
        jCV_ListeBearbeiten.setEnabled(false);
        jCV_ListeDrucken.setEnabled(false);
        jCVListeLesen.setEnabled(false);
        jCVListeSchreiben.setEnabled(false);
        jCVLesen.setEnabled(false);
        jCVSchreiben.setEnabled(false);
        jPOM.setEnabled(false);
        jControlUnitOn.setEnabled(false);

        // init progress bar
        jProgressBar1.setValue(0);
        jProgressBar1.setString(null);

        // set cursor to WAIT
        Cursor c = new Cursor(Cursor.WAIT_CURSOR);
        this.setCursor(c);

        // set retry counter
        retries = CVNavi.timerRetries;
        jProgressBar1.setString(null);
        //start timer
        timer.start();
    }

    private void stopIOAction() {
        // stop timer
        if( timer != null ) {
            timer.stop();
        }

        bLeseCV = false;
        bSchreibeCV = false;
        bListeLesen = false;
        bListeSchreiben = false;
        bWaitAnswerInProgresss = false;

        // set buttons to normal operation
        jAbbrechen.setEnabled(false);

        jCVnr.setEnabled(true);
        jCVwert.setEnabled(true);
        jCV_ListeBearbeiten.setEnabled(true);
        jCV_ListeDrucken.setEnabled(true);
        jCVListeLesen.setEnabled(true);
        jCVListeSchreiben.setEnabled(true);
        jCVLesen.setEnabled(true);
        jCVSchreiben.setEnabled(true);
        jPOM.setEnabled(true);
        jControlUnitOn.setEnabled(true);

        // set cursor
        Cursor c = new Cursor(Cursor.DEFAULT_CURSOR );
        setCursor(c);

        jProgressBar1.setString(null);

        currCV = 0;

        // close interface ?
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCVListeLesen = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jControlUnitOn = new javax.swing.JCheckBox();
        jAbbrechen = new javax.swing.JButton();
        jPOM = new javax.swing.JCheckBox();
        jCVnr = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jCVwert = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jCVSchreiben = new javax.swing.JButton();
        jCVLesen = new javax.swing.JButton();
        jCV_ListeBearbeiten = new javax.swing.JButton();
        jCV_ListeDrucken = new javax.swing.JButton();
        jClose = new javax.swing.JButton();
        jCVListeSchreiben = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("my/CVNavi/Bundle"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("ReadWriteCV.jPanel1.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jCVListeLesen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCVListeLesen.setText(bundle.getString("ReadWriteCV.jCVListeLesen.text")); // NOI18N
        jCVListeLesen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCVListeLesenActionPerformed(evt);
            }
        });

        jProgressBar1.setStringPainted(true);

        jControlUnitOn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jControlUnitOn.setText(bundle.getString("ReadWriteCV.jControlUnitOn.text")); // NOI18N
        jControlUnitOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jControlUnitOnActionPerformed(evt);
            }
        });

        jAbbrechen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jAbbrechen.setText(bundle.getString("ReadWriteCV.jAbbrechen.text")); // NOI18N
        jAbbrechen.setEnabled(false);
        jAbbrechen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAbbrechenActionPerformed(evt);
            }
        });

        jPOM.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPOM.setSelected(true);
        jPOM.setText(bundle.getString("ReadWriteCV.jPOM.text")); // NOI18N
        jPOM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPOMActionPerformed(evt);
            }
        });

        jCVnr.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCVnr.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jCVnr.setText(bundle.getString("ReadWriteCV.jCVnr.text")); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText(bundle.getString("ReadWriteCV.jLabel1.text")); // NOI18N

        jCVwert.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCVwert.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jCVwert.setText(bundle.getString("ReadWriteCV.jCVwert.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText(bundle.getString("ReadWriteCV.jLabel2.text")); // NOI18N

        jCVSchreiben.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCVSchreiben.setText(bundle.getString("ReadWriteCV.jCVSchreiben.text")); // NOI18N
        jCVSchreiben.setMaximumSize(new java.awt.Dimension(125, 25));
        jCVSchreiben.setMinimumSize(new java.awt.Dimension(125, 25));
        jCVSchreiben.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCVSchreibenActionPerformed(evt);
            }
        });

        jCVLesen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCVLesen.setText(bundle.getString("ReadWriteCV.jCVLesen.text")); // NOI18N
        jCVLesen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCVLesenActionPerformed(evt);
            }
        });

        jCV_ListeBearbeiten.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCV_ListeBearbeiten.setText(bundle.getString("ReadWriteCV.jCV_ListeBearbeiten.text")); // NOI18N
        jCV_ListeBearbeiten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCV_ListeBearbeitenActionPerformed(evt);
            }
        });

        jCV_ListeDrucken.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCV_ListeDrucken.setText(bundle.getString("ReadWriteCV.jCV_ListeDrucken.text")); // NOI18N
        jCV_ListeDrucken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCV_ListeDruckenActionPerformed(evt);
            }
        });

        jClose.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jClose.setText(bundle.getString("ReadWriteCV.jClose.text")); // NOI18N
        jClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCloseActionPerformed(evt);
            }
        });

        jCVListeSchreiben.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCVListeSchreiben.setText(bundle.getString("ReadWriteCV.jCVListeSchreiben.text")); // NOI18N
        jCVListeSchreiben.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCVListeSchreibenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCVnr, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCVwert, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCVSchreiben, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCVLesen, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jCV_ListeDrucken, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jClose, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jCV_ListeBearbeiten, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCVListeLesen, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jControlUnitOn)
                                .addGap(38, 38, 38)
                                .addComponent(jPOM))
                            .addComponent(jAbbrechen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCVListeSchreiben, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jControlUnitOn)
                    .addComponent(jPOM))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCVnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jCVwert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCVLesen)
                    .addComponent(jCVSchreiben, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCVListeLesen)
                    .addComponent(jCV_ListeBearbeiten))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCVListeSchreiben)
                .addGap(18, 18, 18)
                .addComponent(jAbbrechen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCV_ListeDrucken)
                    .addComponent(jClose))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCVListeLesenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCVListeLesenActionPerformed
        if (Com == null)
        {
            return;
        }
        CVNavi.flushReadBuffer( Com );

        System.out.println("389 jLesenSchreibenActionPerformed: bLesen CV[1][0.."+CV[0].length+"] auf 0");
        // invalidate all values
        for(int i = 0; i < CV[0].length; i++)
        {
            CV[1][i] = -1;
        }
        // find first CV to read
        currCV = 0;
        for(int i = 0; i < CV[0].length; i++)
        {
            if(CV[0][i] > 0)
            {
                break;
            }
            currCV++;
        }

        cvAnfrage = CV[0][currCV];
        String s = "XPTRD " + cvAnfrage + "\r";
        System.out.println("408 jLesenSchreibenActionPerformed: CV="+currCV+" Com.isconnected["+(Com.isconnected()?1:0)+"]" );
        if( CVNavi.debugLevel > 2 ) {
            System.out.println("410 written \"XPTRD "+ cvAnfrage + "\"" );
        }
        System.out.print("W  "+s);
        timer.setInitialDelay(CVNavi.timer1);
        timer.setDelay(CVNavi.timer2);
        timer.setRepeats(true);
        Com.write(s);
        bWaitAnswerInProgresss = true;


        jProgressBar1.setMaximum(CV[0].length-1);
        jProgressBar1.setValue(0);
        bListeLesen = true;
        resetbArray();
        startIOAction();
    }//GEN-LAST:event_jCVListeLesenActionPerformed

    private void jControlUnitOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jControlUnitOnActionPerformed
        if(jControlUnitOn.isSelected())
        {
            Com.write((byte)0x60);
        }
        else
        {
            Com.write((byte)0x61);
        }
    }//GEN-LAST:event_jControlUnitOnActionPerformed

    private void jAbbrechenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAbbrechenActionPerformed
        stopIOAction();
        bAbbruch = true;
    }//GEN-LAST:event_jAbbrechenActionPerformed

    private void jPOMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPOMActionPerformed
        MsgBox messageBox = new MsgBox( (Frame) this.getParent(), true, this );
        if(jPOM.isSelected())
        {
            messageBox.jLabel1.setText(bundle.getString("ACHTUNG"));
            messageBox.jLabel2.setText(bundle.getString("ReadWriteCV.POM_1"));
            messageBox.jLabel3.setText(bundle.getString("ReadWriteCV.POM_2"));
        }
        else
        {
            messageBox.jLabel1.setText(bundle.getString("ACHTUNG"));
            messageBox.jLabel2.setText(bundle.getString("ReadWriteCV.POM_3"));
            messageBox.jLabel3.setText(bundle.getString("ReadWriteCV.POM_4"));
        }
        messageBox.setLocationRelativeTo(this);
        messageBox.setVisible(true);
    }//GEN-LAST:event_jPOMActionPerformed

    private void jCVSchreibenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCVSchreibenActionPerformed
        if (Com == null)
        {
            return;
        }
        CVNavi.flushReadBuffer( Com );

        cvSchreiben = CVNavi.checkTextField( this, jCVnr, 1, c.MAX_CV, 0, false);
        if( ! CVNavi.checkNumRange(jCVwert.getText(), 0, 255) ) {
            CVNavi.mbValueNaN(this, 0, 255, false);
            jCVwert.grabFocus();
            return;
        }
        cvWert = CVNavi.checkTextField( this, jCVwert, 0, 255, 0, false);
        if(jPOM.isSelected())
        {
            if( cvSchreiben > 0 ) {
                String s = "XPD " + DecAdr + " " + cvSchreiben + " " + cvWert + "\r";
                System.out.println("497 jCVSchreibenActionPerformed POM : XPD " + DecAdr + " " + cvSchreiben + " " + cvWert + s );
                Com.write(s);
                bWaitAnswerInProgresss = true;
            }
        }
        else
        {
            String s = "XPTWD " + " " + cvSchreiben + " " + cvWert + "\r";
            System.out.println("505 jCVSchreibenActionPerformed not POM : XPTWD " + cvSchreiben + " " + cvWert + s );
            Com.write(s);
            bWaitAnswerInProgresss = true;
        }
        bSchreibeCV = true;
        timer.setInitialDelay(CVNavi.timer1);
        timer.setDelay(CVNavi.timer2);
        timer.setRepeats(true);
        resetbArray();
        startIOAction();
    }//GEN-LAST:event_jCVSchreibenActionPerformed

    private void jCVLesenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCVLesenActionPerformed
        if (Com == null)
        {
            return;
        }
        CVNavi.flushReadBuffer( Com );

        cvAnfrage = CVNavi.checkTextField( this, jCVnr, 1, c.MAX_CV, 8, false);
        String s = "XPTRD " + cvAnfrage + "\r";
        System.out.print("516 jCVLesenActionPerformed cvAnfrage["+cvAnfrage+"]"+" : "+s);
        Com.write(s);
        bWaitAnswerInProgresss = true;

        bLeseCV = true;
        timer.setInitialDelay(CVNavi.timer1);
        timer.setDelay(CVNavi.timer2);
        timer.setRepeats(true);
        resetbArray();
        startIOAction();
    }//GEN-LAST:event_jCVLesenActionPerformed

    private void jCV_ListeBearbeitenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCV_ListeBearbeitenActionPerformed
        CVEditList EdList = new CVEditList(this, true, CVNavi, CV, CV_To_Edit, false);
    }//GEN-LAST:event_jCV_ListeBearbeitenActionPerformed

    private void jCV_ListeDruckenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCV_ListeDruckenActionPerformed
        CVEditList EdList = new CVEditList(this, true, CVNavi, CV, CV_To_Edit, true);
    }//GEN-LAST:event_jCV_ListeDruckenActionPerformed

    private void jCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCloseActionPerformed
        Com = CVNavi.safelyCloseCom( this, Com);
        stopIOAction();
        this.dispose();
    }//GEN-LAST:event_jCloseActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
/*        if( ! CVNavi.bSpracheDE) {
            TitledBorder TB = (TitledBorder)jPanel1.getBorder();
            TB.setTitle("read or write CVs");
            jControlUnitOn.setText("switch on control unit");
            jPOM.setText("programming on main (write only)");
            jCVLesen.setText("read CV");
            jCVSchreiben.setText("write CV");
            jCVListeLesen.setText("read CV list");
            jCVListeSchreiben.setText("write CV list");
            jAbbrechen.setText("Cancel");
            jClose.setText("Close");
            jCV_ListeBearbeiten.setText("edit CV list");
            jCV_ListeDrucken.setText("print CV list");
        }*/

        Com = CVNavi.safelyOpenCom( this, Com );
        if( Com == null ) {
            this.dispose();
            return;
        }
        if( debugLevel >= 1 ) {
            System.out.println("inside formWindowOpened Com.connected="+Com.isconnected());
        }

        CV_To_Edit = new byte[c.MAX_CV+1];
        for(int i = 0; i < c.MAX_CV+1; i++)
        {
            CV_To_Edit[i] = 0;
        }
        if( CV == null ) {
            System.out.println("inside formWindowOpened CV ist null !!");
            this.dispose();
            return;
        }
        int len = CV[1].length;
        for(int i = 0; i < CV[1].length; i++)
        {
            if(CV[0][i] != 7)
            {
                if(CV[0][i] != 8)
                {
                    if(CV[0][i] > 0) 
                    {
                        CV_To_Edit[CV[0][i] - 1] = 1;
    //PF                    if( debugLevel >= 1 ) {
    //PF                        System.out.println("CV_To_Edit["+(CV[0][i] - 1)+"]=1 val=["+(CV[1][i])+"]" );
    //PF                   }
                    }
                }
            }
            if( debugLevel >= 1 ) {
                System.out.println("CV_To_Edit["+(CV[0][i] - 1)+"]="+CV_To_Edit[CV[0][i]]+"] val=["+(CV[1][i])+"]" );
            }
        }

        // store pointer to instance in a final variable -> useable inside ActionListener
        final ReadWriteCV outerThis = this;

        final ActionListener actionListener = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                String s = "-1";

                if( bAbbruch ) {
                    System.out.println("Abbruch durch Benutzer" );
                    stopIOAction();
                    CVNavi.mbRWCancelled(outerThis, 5);
                    return;
                }

                if( bWaitAnswerInProgresss ) {
                    byte[] bArrayTmp = new byte[200];
                    int newBytes;
                    newBytes = Com.read(bArrayTmp); // was gibts Neues ?
                    if( newBytes > 0 ) {
                        //wenn ja, an bisher empfangene Daten anhängen
                        System.arraycopy(bArrayTmp, 0, bArray, bytesRead, newBytes);
                        if( CVNavi.debugLevel > 0 ) {
                            System.out.println("628 MERGE PRE bytesRead="+bytesRead+" newBytes="+newBytes+" res="+(bytesRead+newBytes) );
                        }
                        bytesRead += newBytes;
                        bArray[bytesRead] = 0;
                        if( CVNavi.debugLevel > 2 ) {
                            System.out.println("633 aktueller Stand: bytesRead="+bytesRead );
                            CVNavi.dumpbArray(bArray);
                        }
                    }

                    if( newBytes == 0 ) {
                        System.out.print("->"+retries+" ");
                        retries--;
                        if( retries == 0 ) {
                            jProgressBar1.setString(null);
                            System.out.println(" -> retries ende bytesRead="+bytesRead );
                            stopIOAction();
                            CVNavi.mbDeviceReadProblem( outerThis );
                            //String tmp  = new String(bArray);
                            //CVNavi.mbGeneric(CVNavi, "ZUSATZINFO", " -> retries ende bytesRead="+bytesRead, tmp, true);
                            return;
                        }
                        jProgressBar1.setString(bundle.getString("ReadWriteCV.Warte")+retries);
                        return;
                    }

                    // es ist ein vollständiger Datensatz angekommen ?
                    bArray[bytesRead] = 0; // zur Sicherheit ;)

                    if( ! CVNavi.checkReadComplete(bArray) ) {
                        // incomplete -> wait for more
                        return;
                    }
                    bWaitAnswerInProgresss = false;
                    // Datensatz vollständig -> Teste/Analysiere erwarteten Wert
                }


                if( bLeseCV ) {
                    // read single CV
                    cvWert = CVNavi.checkPTRDAnswer( bArray );
                    if( CVNavi.debugLevel >= 2 ) {
                        System.out.println("674 checkPTRDAnswer liefert cvWert="+cvWert );
                    }

                    if( CVNavi.checkNumRange(cvWert, 0, 255) ) {
                        // alles OK
                        CV[1][cvAnfrage] = cvWert;
                        // jCVnr.setText("" + cvAnfrage); // steht doch schon da ?
                        jCVwert.setText("" + cvWert);
                        System.out.println("682 bLesen CV["+cvAnfrage+"]="+cvWert );
                    } else {
                        jCVnr.setText("" + cvAnfrage);
                        jCVwert.setText("???");
                    }
                    bLeseCV = false;
                    stopIOAction();
                }

                if(bSchreibeCV) {
                    // write single CV

                    if( CVNavi.checkAnswerOK( bArray ) ) {
                        // answer was OK
                        System.out.println("Answer for writing CV"+cvSchreiben+" was OK" );
                    } else { // problem with answer
                        System.out.println("Answer for writing CV"+cvSchreiben+" was NOT OK" );
                        CVNavi.dumpbArray(bArray);
                        if( CVNavi.checkAnswerNoAck(bArray)) {
                            CVNavi.mbTimeout( outerThis, c.mbRDtimeout);
                        } else {
                            CVNavi.mbTimeout( outerThis );
                        }
                    }
                    bSchreibeCV = false;
                    stopIOAction();
                }

                if(bListeLesen) {
                    // read list of CVs
                    if( CVNavi.debugLevel >= 2 ) {
                        System.out.println("713 bListeLesen: CV="+currCV+" Com.isconnected["+Com.isconnected()+"] retries["+retries+"] bAbbruch["+bAbbruch+"]"+" tINIT="+timer.getInitialDelay()+" tIntervall="+timer.getDelay() );
                    }
                    if( (cvAnfrage > 0) && !bAbbruch ) {
                        cvWert = CVNavi.checkPTRDAnswer( bArray );
                        if( CVNavi.debugLevel >= 2 ) {
                            System.out.println("718 checkPTRDAnswer liefert cvWert="+cvWert );
                        }

                        if( CVNavi.checkNumRange(cvWert, 0, 255) ) {
                            // alles OK
                            CV[1][cvAnfrage] = cvWert;
                            jCVnr.setText("" + cvAnfrage);
                            jCVwert.setText("" + cvWert);
                            System.out.println("726 bLesen CV["+cvAnfrage+"]="+cvWert );
                            nTimeOut = 0;
                        } else {
                            if(nTimeOut > 3)
                            {
                                jCVnr.setText("" + CV[0][currCV]);
                                jCVwert.setText("-1");
                                System.out.println("733 bLesen TIMEOUT cv["+cvAnfrage+"]= ??? -1 cvWert["+cvWert+"]");
                                CV[1][currCV] = 0;
                            } else {
                                // CV-index um 1 zurück -> nächste CV-Anfrage wird wieder die aktuelle CV
                                currCV--;
                                nTimeOut++;
                                System.out.println("739 bLesen wiederholen nTimeOut["+nTimeOut+"]");
                            }
                        }
                        // nächste CV suchen
                        currCV++;
                        while(currCV < CV[0].length-1) {
                            if(CV[0][currCV] != 0) {
                                if( CVNavi.skipCV17 && (currCV == 17) ) {
                                    currCV++;
                                    continue;
                                }
                                if( CVNavi.skipCV18 && (currCV == 18) ) {
                                    currCV++;
                                    continue;
                                }
                                break;
                            }
                            currCV++;
                        }
                        if( currCV < CV[0].length ) {
                            jProgressBar1.setValue(currCV);
                            cvAnfrage = CV[0][currCV];
                        } else {
                            cvAnfrage = 0;
                        }
                        if( cvAnfrage != 0 ) {
                            if( CVNavi.timer3 > 0 ) {
                                System.out.println("766 Extra Pause timer3 = "+CVNavi.timer3 );
                                try {
                                    Thread.sleep(CVNavi.timer3);
                                } catch (InterruptedException ex2) {
                                    Logger.getLogger(CVNavi.class.getName()).log(Level.SEVERE, null, ex2);
                                }
                            }

                            s = "XPTRD " + cvAnfrage + "\r";
                            if( CVNavi.debugLevel > 2 ) {
                                System.out.println("776 written \"XPTRD "+ cvAnfrage + "\"" + s );
                            }
                            System.out.print("W  "+s);
                            Com.write(s);
                            bWaitAnswerInProgresss = true;
                            jProgressBar1.setString(null);
                            retries = CVNavi.timerRetries;
                            resetbArray();
                            timer.restart();
                        } else {
                            System.out.println("786 END OF CV LIST" );
                        }
                    }

                    if( (cvAnfrage == 0) || bAbbruch) { // And now the end is near...
                        System.out.println("791 bLesen LAST ACTION" );
                        stopIOAction();
                        if( ! bAbbruch ) {
                            CVNavi.mbConfigReadSuccess( outerThis, 5);
                        }
                        bAbbruch = false;
                    }
                } 

                if( bListeSchreiben ) {
                    // write list of CVs
                    if( CVNavi.debugLevel >= 1 ) {
                        System.out.println("803 bListeSchreiben: CV="+currCV+" Com.isconnected["+Com.isconnected()+"] retries["+retries+"] bAbbruch["+bAbbruch+"]" );
                    }
                    if( (cvSchreiben > 0) && !bAbbruch ) // waiting for a commit (OK) 
                    {
                        if( CVNavi.checkAnswerOK( bArray ) ) {
                            // answer was OK
                            System.out.println("Answer for writing CV"+cvSchreiben+" was OK" );
                            cvSchreiben = 0;
                            nTimeOut = 0;
                        } else { // problem with answer
                            System.out.println("Answer for writing CV"+cvSchreiben+" was NOT OK" );
                            CVNavi.dumpbArray(bArray);
                            if( CVNavi.checkAnswerNoAck(bArray)) {
                                CVNavi.mbTimeout( outerThis, c.mbRDtimeout);
                            } else {
                                CVNavi.mbTimeout( outerThis );
                            }
                            stopIOAction();
                            return;
                        }

                        if( currCV < CV[0].length && !bAbbruch )
                        {
                            // find next CV to write
                            for(; currCV < CV[0].length; currCV++) {
                                try{
                                    if( CV[0][currCV] == 0 )
                                        continue;
                                    if (CV_To_Edit[CV[0][currCV]-1] == 1)
                                        break;
                                } catch (Exception ex) {
                                    // do nothing , just skip ;)
                                }
                            }
                            System.out.println("837 bListeSchreiben: next CV="+currCV );
                            if (currCV < CV[0].length) {
                                cvSchreiben = CV[0][currCV];
                                if( cvSchreiben != 7 && cvSchreiben != 8) {
                                    cvWert = CV[1][currCV];
                                    jCVnr.setText("" + cvSchreiben);
                                    jCVwert.setText("" + cvWert);
                                    if( jPOM.isSelected() ) {
                                        s = "XPD " + DecAdr + " " + CV[0][currCV] + " " + CV[1][currCV] + "\r";
                                        System.out.println("846 bListeSchreiben: POM: XPD "+DecAdr+" "+cvSchreiben+" "+cvWert );
                                    } else {
                                        s = "XPTWD " + cvSchreiben + " " + cvWert + "\r";
                                        System.out.println("849 bListeSchreiben !POM: XPTWD "+cvSchreiben+" "+cvWert + s);
                                    }
                                    System.out.print("W  "+s);
                                    Com.write(s);
                                    bWaitAnswerInProgresss = true;
                                    jProgressBar1.setString(null);
                                    retries = CVNavi.timerRetries;
                                    resetbArray();
                                    timer.restart();
                                } else {
                                    System.out.println("859 bListeSchreiben: SKIP CV="+cvSchreiben+" Wert="+cvWert );
                                    cvSchreiben = 0;
                                }
                            }
                            jProgressBar1.setValue(currCV);
                            currCV++;
                        }
                        else
                        {
                            if( currCV < CV[0].length )
                            {
                                jCVnr.setText("" + CV[0][currCV]);
                                jCVwert.setText("" + CV[1][currCV]);
                                System.out.println("872 bListeSchreiben CV["+CV[0][currCV]+"]="+CV[1][currCV] );
                            }
                            stopIOAction();
                            CVNavi.mbConfigWriteSuccess( outerThis, 5 );
                        }
                    }
                }
            }
        };

        timer = new Timer(333, actionListener);
        timer.setRepeats(true);
        timer.stop();
     }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Com = CVNavi.safelyCloseCom( this, Com);
        stopIOAction();
    }//GEN-LAST:event_formWindowClosed

    private void jCVListeSchreibenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCVListeSchreibenActionPerformed
        if (Com == null)
        {
            return;
        }
        CVNavi.flushReadBuffer( Com );

        String str;
        if(jPOM.isSelected())
        {
            Com.write((byte)0x60);  // Zentrale an
            jControlUnitOn.setSelected(true);
            n = 0;
            System.out.println("905 POM");
            for(n = 0; n < 255; n++)
            {
                if( CV_To_Edit[n] == 1 )
                {
                    break;
                }
            }
            System.out.println("913 POM: n="+n);
            // is CV29 writable ?
            if( CV_To_Edit[28] == 1 ) {
                System.out.println("916 POM: CV_To_Edit[28] == 1");
                // find index of CV29 in CV array (save as n)
                for (int i = 0; i < CV[0].length; i++) {
                    if (CV[0][i] == 29) {
                        n = i;
                        System.out.println("921 POM CV 29 at n="+n);
                        break;
                    }
                }
                System.out.println("925 disable Railcom in CV"+CV[0][n]+" at pos n="+n);
                cvSchreiben = CV[0][n];
                cvWert = CV[1][n] & ~8; // CV29 without Railcom bit (will be restored after writing address CVs 1, 17, 18)
                str = "XPD " + DecAdr + " " + cvSchreiben + " " + cvWert + "\r";
                Com.write(str);
                bWaitAnswerInProgresss = true;
                System.out.println("931 jLesenSchreibenActionPerformed: !bLesen POM CV29: XPD " + DecAdr + " " + cvSchreiben + " " + cvWert + str);
            }
            timer.setInitialDelay(CVNavi.timer1);
            timer.setDelay(CVNavi.timer2);
        }
        else
        { // not POM
            // find first CV to write
            currCV = 0;
            for(int i = 0; i < CV[0].length; i++)
            {
                if(CV[0][i] > 0)
                {
                    break;
                }
                currCV++;
            }
            if( currCV < CV[0].length ) {
                cvSchreiben = CV[0][currCV];
                if( cvSchreiben != 7 && cvSchreiben != 8) {
                    cvWert = CV[1][currCV] ;
                    str = "XPTWD " + cvSchreiben + " " + cvWert + "\r";
                    System.out.println("953 !bLesen !POM : XPTWD "+cvSchreiben+" "+cvWert+str);
                    Com.write(str);
                    bWaitAnswerInProgresss = true;
                } else {
                    cvSchreiben = 0;
                }
            }
            jProgressBar1.setValue(currCV);
            if( cvSchreiben > 0 ) {
                jCVnr.setText("" + cvSchreiben);
                jCVwert.setText("" + cvWert);
            }
            currCV++;

            timer.setInitialDelay(CVNavi.timer1);
            timer.setDelay(CVNavi.timer2);
        }

        jProgressBar1.setMaximum(CV[0].length-1);
        jProgressBar1.setValue(0);
        bListeSchreiben = true;
        resetbArray();
        startIOAction();
    }//GEN-LAST:event_jCVListeSchreibenActionPerformed

    private void resetbArray() {
        // reset bArray with '0'
        for( int i = 0 ; i < bytesRead ; i++ ) {
            bArray[i] = 0;
        }
        bytesRead = 0;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAbbrechen;
    private javax.swing.JButton jCVLesen;
    public javax.swing.JButton jCVListeLesen;
    public javax.swing.JButton jCVListeSchreiben;
    private javax.swing.JButton jCVSchreiben;
    public javax.swing.JButton jCV_ListeBearbeiten;
    public javax.swing.JButton jCV_ListeDrucken;
    private javax.swing.JTextField jCVnr;
    private javax.swing.JTextField jCVwert;
    private javax.swing.JButton jClose;
    private javax.swing.JCheckBox jControlUnitOn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JCheckBox jPOM;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables
}
