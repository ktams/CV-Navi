/*
 * DecoderFilter.java
 *
 *
 * @author Kersten Tams Copyright 2009-2018
 * @author Lothar Roth  Copyright 2012-2018
 *
 */

package my.CVNavi;

import java.awt.Font;
import static java.util.ResourceBundle.getBundle;
import static my.CVNavi.CVNavi.debugLevel;

/**
 *
 */
public class ConnectedDevices extends javax.swing.JFrame {

    /**
     * Creates new form ConnectedDevices
     */
    
    public MC CVNavi;
    String[] strDevs;
    String sMasterVersion = "";
    String outFormat = "%-13s %-7s %8s   %s\r\n";
    
    public ConnectedDevices(MC aThis) {
        initComponents();
        CVNavi = aThis;
        setLocationRelativeTo(aThis);
        setVisible(true);
        CVNavi.bconnectedDevicesIsActiv = true;
    }

    private ConnectedDevices() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public void ShowDevs( String nam, String num, String ver, String rem) {
        this.jDevices.setFont(new Font("FreeMono", Font.PLAIN, 14));
        String sRemark = rem;
        switch(nam) {
            case "C":
                String out = String.format( outFormat, getBundle("my/CVNavi/Bundle").getString("typeHeader"), "Version", "Hardware", getBundle("my/CVNavi/Bundle").getString("remarkHeader") );
                jDevices.append( out );
                System.out.print("ConnectedDevices: "+out);
                nam = "Central unit";
                sRemark = "RedBox or MC";
                sMasterVersion = ver;
                break;
            default:
                nam = "Control["+nam+"]";
                switch(num) {
                    case "13":
                        sRemark = "control (LC/SNC/HC1/PC/MCasLC)";
                        break;
                    case "15":
                        sRemark = "Hand control 2";
                        break;
                    case "110":
                        sRemark = "XN control";
                        break;
                }
                if( ! sMasterVersion.equals(ver)) {
                    sRemark += "    -> check version";
                }
        }
        String out = String.format( outFormat, nam, ver, num, sRemark );
        jDevices.append( out );
        System.out.print("ConnectedDevices: "+out);
    }

    public void SetDevs()
    {
        System.out.println("ConnectedDevices: strDevs.length="+strDevs.length);

        for(int i = 0; i < strDevs.length; i++)
        {
            if( debugLevel > 2 ) {
                System.out.println( "ConnectedDevices: strDevs["+i+"]=\""+strDevs[i]+"\"" );
            }
            String sDevIdx = "";
            String sDevNum = "";
            String sDevVer = "";
            String out = "";
            String sArr[] = strDevs[i].split(" ");
            if( sArr.length == 3 ) {
                sDevIdx = sArr[0];
                sDevNum = sArr[1];
                sDevVer = sArr[2];
                ShowDevs(sDevIdx, sDevNum, sDevVer, "" );
            } else {
                switch(strDevs[i]) {
                    case "*END*":
                        // ignore
                        break;
                    case "]":
                        // ignore
                        break;
                    case "ERROR: not implemented (yet)":
                        jDevices.append( "not yet implemented" );
                        break;
                    default:
                        String errout = String.format( outFormat, "->", "->", "->", "unknown device \""+strDevs[i]+"\"" );
                        jDevices.append( errout );
                        if( debugLevel > 1 ) {
                            out = "ConnectedDevices: problem because not 3 parts in \""+strDevs[i]+"\"";
                        }
                }
            }
            if( out.length() > 0 ) {
                System.out.println(out);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOK = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jDevices = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("my/CVNavi/Bundle"); // NOI18N
        jOK.setText(bundle.getString("ConnectedDevices.jOK.text")); // NOI18N
        jOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOKActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(bundle.getString("ConnectedDevices.jLabel1.text")); // NOI18N

        jDevices.setEditable(false);
        jDevices.setColumns(20);
        jDevices.setRows(5);
        jScrollPane1.setViewportView(jDevices);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jOK, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(253, 253, 253))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addComponent(jOK)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOKActionPerformed
        this.dispose();
    }//GEN-LAST:event_jOKActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jDevices.setText("\r\n");
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        CVNavi.bconnectedDevicesIsActiv = false;
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConnectedDevices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConnectedDevices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConnectedDevices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConnectedDevices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConnectedDevices().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea jDevices;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jOK;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
